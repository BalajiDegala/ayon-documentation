{
    "openapi": "3.0.2",
    "info": {
        "title": "AYON server",
        "description": "Open VFX and Animation pipeline server",
        "termsOfService": "https://ynput.io/terms-of-service",
        "contact": {
            "name": "Ynput",
            "url": "https://ynput.io",
            "email": "info@ynput.io"
        },
        "license": {
            "name": "Apache License 2.0",
            "url": "http://www.apache.org/licenses/"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/addons/{addon_name}/{version}/schema/{project_name}": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get Addon Project Settings Schema",
                "description": "Return the JSON schema of the addon settings.",
                "operationId": "get_addon_project_settings_schema",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Version", "type": "string" },
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Site",
                            "pattern": "^[a-z0-9-]+$",
                            "type": "string"
                        },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addons/{addon_name}/{version}/settings/{project_name}": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get Addon Project Settings",
                "operationId": "get_addon_project_settings",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Version", "type": "string" },
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Project Name", "type": "string" },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Site",
                            "pattern": "^[a-z0-9-]+$",
                            "type": "string"
                        },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Addon settings"],
                "summary": "Set Addon Project Settings",
                "description": "Set the studio overrides of the given addon.",
                "operationId": "set_addon_project_settings",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Version", "type": "string" },
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Project Name", "type": "string" },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Site",
                            "pattern": "^[a-z0-9-]+$",
                            "type": "string"
                        },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": { "title": "Payload", "type": "object" }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addons/{addon_name}/{version}/overrides/{project_name}": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get Addon Project Overrides",
                "operationId": "get_addon_project_overrides",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Version", "type": "string" },
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Project Name", "type": "string" },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Site",
                            "pattern": "^[a-z0-9-]+$",
                            "type": "string"
                        },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Addon settings"],
                "summary": "Modify Project Overrides",
                "operationId": "modify_project_overrides",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Version", "type": "string" },
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Project Name", "type": "string" },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Site",
                            "pattern": "^[a-z0-9-]+$",
                            "type": "string"
                        },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyOverridesRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Addon settings"],
                "summary": "Delete Addon Project Overrides",
                "operationId": "delete_addon_project_overrides",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Version", "type": "string" },
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Site",
                            "pattern": "^[a-z0-9-]+$",
                            "type": "string"
                        },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addons/{addon_name}/{version}/siteSettings/schema": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get Addon Site Settings Schema",
                "description": "Return the JSON schema of the addon site settings.",
                "operationId": "get_addon_site_settings_schema",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Version", "type": "string" },
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addons/{addon_name}/{version}/siteSettings": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get Addon Site Settings",
                "description": "Return the JSON schema of the addon site settings.",
                "operationId": "get_addon_site_settings",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Version", "type": "string" },
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Site", "type": "string" },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Addon settings"],
                "summary": "Set Addon Site Settings",
                "operationId": "set_addon_site_settings",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Version", "type": "string" },
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Site ID",
                            "pattern": "^[a-z0-9-]+$",
                            "type": "string"
                        },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": { "title": "Payload", "type": "object" }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addons/{addon_name}/{addon_version}/schema": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get Addon Settings Schema",
                "description": "Return the JSON schema of the addon settings.",
                "operationId": "get_addon_settings_schema",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Addon Version",
                            "type": "string"
                        },
                        "name": "addon_version",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addons/{addon_name}/{addon_version}/settings": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get Addon Studio Settings",
                "description": "Return the settings (including studio overrides) of the given addon.",
                "operationId": "get_addon_studio_settings",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Addon Version",
                            "type": "string"
                        },
                        "name": "addon_version",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Addon settings"],
                "summary": "Set Addon Studio Settings",
                "description": "Set the studio overrides for the given addon.",
                "operationId": "set_addon_studio_settings",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Addon Version",
                            "type": "string"
                        },
                        "name": "addon_version",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": { "title": "Payload", "type": "object" }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addons/{addon_name}/{addon_version}/overrides": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get Addon Studio Overrides",
                "operationId": "get_addon_studio_overrides",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Addon Version",
                            "type": "string"
                        },
                        "name": "addon_version",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Addon settings"],
                "summary": "Modify Studio Overrides",
                "operationId": "modify_studio_overrides",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Addon Version",
                            "type": "string"
                        },
                        "name": "addon_version",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyOverridesRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Addon settings"],
                "summary": "Delete Addon Studio Overrides",
                "operationId": "delete_addon_studio_overrides",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Addon Name", "type": "string" },
                        "name": "addon_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Addon Version",
                            "type": "string"
                        },
                        "name": "addon_version",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Variant",
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addons/example/1.0.0/get-random-folder/{project_name}": {
            "get": {
                "tags": ["Example addon 1.0.0"],
                "summary": "Get Random Folder",
                "description": "Return a random folder from the database",
                "operationId": "example_1_0_0_get_random_folder",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addons": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "List Addons",
                "description": "List all available addons.",
                "operationId": "list_addons",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Show details",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "details",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddonList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Addon settings"],
                "summary": "Configure Addons",
                "operationId": "configure_addons",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddonConfigRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/anatomy/schema": {
            "get": {
                "tags": ["Anatomy"],
                "summary": "Get Anatomy Schema",
                "description": "Returns the anatomy JSON schema.\n\nThe schema is used to display the anatomy preset editor form.",
                "operationId": "get_anatomy_schema",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/anatomy/presets": {
            "get": {
                "tags": ["Anatomy"],
                "summary": "Get Anatomy Presets",
                "description": "Return a list of stored anatomy presets.",
                "operationId": "get_anatomy_presets",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnatomyPresetListModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/anatomy/presets/{preset_name}": {
            "get": {
                "tags": ["Anatomy"],
                "summary": "Get Anatomy Preset",
                "description": "Returns the anatomy preset with the given name.\n\nUse `_` character as a preset name to return the default preset.",
                "operationId": "get_anatomy_preset",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Preset Name", "type": "string" },
                        "name": "preset_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Anatomy"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Anatomy"],
                "summary": "Update Anatomy Preset",
                "description": "Create/update an anatomy preset with the given name.",
                "operationId": "update_anatomy_preset",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Preset Name", "type": "string" },
                        "name": "preset_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/Anatomy" }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Anatomy"],
                "summary": "Delete Anatomy Preset",
                "description": "Delete the anatomy preset with the given name.",
                "operationId": "delete_anatomy_preset",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Preset Name", "type": "string" },
                        "name": "preset_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/anatomy/presets/{preset_name}/primary": {
            "post": {
                "tags": ["Anatomy"],
                "summary": "Set Primary Preset",
                "description": "Set the given preset as the primary preset.",
                "operationId": "set_primary_preset",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Preset Name", "type": "string" },
                        "name": "preset_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/attributes": {
            "get": {
                "tags": ["Attributes"],
                "summary": "Get Attribute List",
                "description": "Return a list of attributes and their configuration.",
                "operationId": "get_attribute_list",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttributeListModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Attributes"],
                "summary": "Set Attribute List",
                "description": "Set the attribute configuration for all (or a subset of) attributes",
                "operationId": "set_attribute_list",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetAttributeListModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/attributes/{attribute_name}": {
            "get": {
                "tags": ["Attributes"],
                "summary": "Get Attribute Config",
                "description": "Return the configuration for a single attribute.",
                "operationId": "get_attribute_config",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Attribute name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "attribute_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttributeModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Attributes"],
                "summary": "Set Attribute Config",
                "description": "Update attribute configuration",
                "operationId": "set_attribute_config",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Attribute name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "attribute_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AttributePutModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Attributes"],
                "summary": "Delete Attribute",
                "operationId": "delete_attribute",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Attribute name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "attribute_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Login",
                "description": "Login using name/password credentials.\n\nReturns access token and user information. The token is used for\nauthentication in other endpoints. It is valid for 24 hours,\nbut it is extended automatically when the user is active.\n\nToken may be revoked by calling the logout endpoint or using\nsession manager.\n\nReturns 401 response if the credentials are invalid.",
                "operationId": "login",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/auth__auth__LoginResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unable to log in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Unable to log in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Logout",
                "description": "Log out the current user.",
                "operationId": "logout",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogoutResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/sessions": {
            "get": {
                "tags": ["Authentication"],
                "summary": "List Active Sessions",
                "operationId": "list_active_sessions",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response List Active Sessions Api Auth Sessions Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SessionModel"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/dependencies": {
            "get": {
                "tags": ["Dependencies"],
                "summary": "List Dependency Packages",
                "description": "Return a list of dependency packages",
                "operationId": "list_dependency_packages",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DependencyPackageList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Dependencies"],
                "summary": "Store Dependency Package",
                "description": "Create (or update) a dependency package record in the database.\n\nYou can set external download locations in the payload,\nit is not necessary to set \"server\" location (it is added automatically)\nto the response when an uploaded package is found.",
                "operationId": "store_dependency_package",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DependencyPackage"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/dependencies/{package_name}/{platform}": {
            "get": {
                "tags": ["Dependencies"],
                "summary": "Download Dependency Package",
                "description": "Download dependency package.\n\nUse this endpoint to download dependency package stored on the server.",
                "operationId": "download_dependency_package",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Package Name", "type": "string" },
                        "name": "package_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Platform",
                            "enum": ["windows", "linux", "darwin"],
                            "type": "string"
                        },
                        "name": "platform",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Dependencies"],
                "summary": "Upload Dependency Package",
                "description": "Upload a dependency package to the server.",
                "operationId": "upload_dependency_package",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Package Name", "type": "string" },
                        "name": "package_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Platform",
                            "enum": ["windows", "linux", "darwin"],
                            "type": "string"
                        },
                        "name": "platform",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Dependencies"],
                "summary": "Delete Dependency Package",
                "description": "Delete a dependency package from the server.\nIf there is an uploaded package, it will be deleted as well.",
                "operationId": "delete_dependency_package",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Package Name", "type": "string" },
                        "name": "package_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Platform",
                            "enum": ["windows", "linux", "darwin"],
                            "type": "string"
                        },
                        "name": "platform",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/enroll": {
            "post": {
                "tags": ["Events"],
                "summary": "Enroll",
                "description": "Enroll for a new job.\n\nEnroll for a new job by providing a source topic and target topic.\nUsed by workers to get a new job to process. If there is no job\navailable, request returns 204 (no content).",
                "operationId": "enroll",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnrollRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnrollResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/events": {
            "post": {
                "tags": ["Events"],
                "summary": "Post Event",
                "operationId": "post_event",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DispatchEventRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DispatchEventResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/events/{event_id}": {
            "get": {
                "tags": ["Events"],
                "summary": "Get Event",
                "description": "Get event by ID.\n\nReturn event data with given ID. If event is not found, 404 is returned.",
                "operationId": "get_event",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Event ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "event_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Events"],
                "summary": "Update Existing Event",
                "description": "Update existing event.",
                "operationId": "update_existing_event",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Event ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "event_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateEventRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/folders/{folder_id}": {
            "get": {
                "tags": ["Folders"],
                "summary": "Get Folder",
                "description": "Retrieve a folder by its ID.",
                "operationId": "get_folder",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Folder ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "folder_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Project not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Folders"],
                "summary": "Delete Folder",
                "description": "Delete a folder.",
                "operationId": "delete_folder",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Folder ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "folder_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Folders"],
                "summary": "Update Folder",
                "description": "Patch (partially update) a folder.\n\nOnce there is a version published, the folder's name and hierarchy\ncannot be changed.",
                "operationId": "update_folder",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Folder ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "folder_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FolderPatchModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/folders": {
            "post": {
                "tags": ["Folders"],
                "summary": "Create Folder",
                "description": "Create a new folder.",
                "operationId": "create_folder",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FolderPostModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/hierarchy": {
            "get": {
                "tags": ["Folders"],
                "summary": "Get Folder Hierarchy",
                "description": "Return a folder hierarchy of a project.",
                "operationId": "get_folder_hierarchy",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "description": "Full-text search query used to limit the result",
                        "required": false,
                        "schema": {
                            "title": "Search query",
                            "type": "string",
                            "description": "Full-text search query used to limit the result",
                            "default": ""
                        },
                        "example": "forest",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of folder_types to show",
                        "required": false,
                        "schema": {
                            "title": "Type filter",
                            "type": "string",
                            "description": "Comma separated list of folder_types to show",
                            "default": ""
                        },
                        "example": "AssetBuild,Shot,Sequence",
                        "name": "types",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HierarchyResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Folders"],
                "summary": "Change Hierarchy",
                "description": "Change the hierarchy of a project.\n\nSet a folder as a parent of another folder(s)",
                "operationId": "change_hierarchy",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HierarchyChangeModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/links/types": {
            "get": {
                "tags": ["Links"],
                "summary": "List Link Types",
                "description": "List all link types",
                "operationId": "list_link_types",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LinkTypeListResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/links/types/{link_type}": {
            "put": {
                "tags": ["Links"],
                "summary": "Create Link Type",
                "description": "Create new link type",
                "operationId": "create_link_type",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Link Type", "type": "string" },
                        "name": "link_type",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": { "title": "Data", "type": "object" }
                        }
                    }
                },
                "responses": {
                    "201": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Links"],
                "summary": "Delete Link Type",
                "description": "Delete link type",
                "operationId": "delete_link_type",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Link Type", "type": "string" },
                        "name": "link_type",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/links": {
            "post": {
                "tags": ["Links"],
                "summary": "Create Entity Link",
                "description": "Create a new entity link.",
                "operationId": "create_entity_link",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateLinkRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Coflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": { "code": 409, "detail": "Coflict" }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/links/{link_id}": {
            "delete": {
                "tags": ["Links"],
                "summary": "Delete Entity Link",
                "description": "Delete a link.\n\nNormal users can only delete links they created.\nManagers can delete any link.",
                "operationId": "delete_entity_link",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Link ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "link_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/oauth2/options": {
            "get": {
                "tags": ["Authentication"],
                "summary": "Oauth2 Options",
                "description": "Return a list of available OAuth2 providers.",
                "operationId": "oauth2_options",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuth2Options"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/oauth2/login/{provider_name}": {
            "get": {
                "tags": ["Authentication"],
                "summary": "Oauth2 Login",
                "operationId": "oauth2_login",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Provider Name",
                            "type": "string"
                        },
                        "name": "provider_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Redirect Uri", "type": "string" },
                        "name": "redirect_uri",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Code", "type": "string" },
                        "name": "code",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/oauth__LoginResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/operations": {
            "post": {
                "tags": ["Projects"],
                "summary": "Operations",
                "description": "Process multiple operations (create / update / delete) in a single request.\n\nAll operations are processed in the order they are provided in the request.\nIf can_fail is set to False, the processing stops on the first error and\nall previous operations are rolled back. If can_fail is set to True, the\nprocessing continues and all operations are committed.\n\nThe response contains the list of operations with their success status.\nIn case of failure, the error message is provided for each operation.\n\nThis endpoint normally does not return error response, unless there is\na problem with the request itself or an unhandled exception.\nDo not rely on a status code to determine if the operation was successful.\n\nAlways check the `success` field of the response.",
                "operationId": "operations",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationsRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationsResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/dashboard/entities": {
            "get": {
                "tags": ["Project dashboard"],
                "summary": "Get Project Entity Counts",
                "description": "Retrieve entity counts for a given project.",
                "operationId": "get_project_entity_counts",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityCounts"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/dashboard/health": {
            "get": {
                "tags": ["Project dashboard"],
                "summary": "Get Project Health",
                "operationId": "get_project_health",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Health"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/dashboard/activity": {
            "get": {
                "tags": ["Project dashboard"],
                "summary": "Get Project Activity",
                "operationId": "get_project_activity",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "description": "Number of days to retrieve activity for",
                        "required": false,
                        "schema": {
                            "title": "Days",
                            "type": "integer",
                            "description": "Number of days to retrieve activity for",
                            "default": 50
                        },
                        "name": "days",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/dashboard/users": {
            "get": {
                "tags": ["Project dashboard"],
                "summary": "Get Project Users",
                "operationId": "get_project_users",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/anatomy": {
            "get": {
                "tags": ["Projects"],
                "summary": "Get Project Anatomy",
                "description": "Retrieve a project anatomy.",
                "operationId": "get_project_anatomy",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Anatomy"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Project not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Projects"],
                "summary": "Set Project Anatomy",
                "description": "Set a project anatomy.",
                "operationId": "set_project_anatomy",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/Anatomy" }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects": {
            "get": {
                "tags": ["Projects"],
                "summary": "List Projects",
                "description": "Return a list of available projects.",
                "operationId": "list_projects",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Page",
                            "minimum": 1.0,
                            "type": "integer",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "If not provided, the result will not be limited",
                        "required": false,
                        "schema": {
                            "title": "Records per page",
                            "minimum": 1.0,
                            "type": "integer",
                            "description": "If not provided, the result will not be limited",
                            "default": 50
                        },
                        "name": "length",
                        "in": "query"
                    },
                    {
                        "description": "If not provided, return projects regardless the flag",
                        "required": false,
                        "schema": {
                            "title": "Show library projects",
                            "type": "boolean",
                            "description": "If not provided, return projects regardless the flag"
                        },
                        "name": "library",
                        "in": "query"
                    },
                    {
                        "description": "If not provided, return projects regardless the flag",
                        "required": false,
                        "schema": {
                            "title": "Show active projects",
                            "type": "boolean",
                            "description": "If not provided, return projects regardless the flag"
                        },
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Attribute to order the list by",
                            "enum": ["name", "createdAt", "updatedAt"],
                            "type": "string",
                            "default": "name"
                        },
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Sort in descending order",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "description": "Limit the result to project with the matching name,\n        or its part. % character may be used as a wildcard",
                        "required": false,
                        "schema": {
                            "title": "Filter by name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string",
                            "description": "Limit the result to project with the matching name,\n        or its part. % character may be used as a wildcard",
                            "default": ""
                        },
                        "example": "forest",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListProjectsResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Projects"],
                "summary": "Deploy Project",
                "description": "Create a new project using the provided anatomy object.\n\nMain purpose is to take an anatomy object and transform its contents\nto the project entity (along with additional data such as the project name).",
                "operationId": "deploy_project",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeployProjectRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": { "description": "Project created", "content": {} },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Project already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 409,
                                    "detail": "Project already exists"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}": {
            "get": {
                "tags": ["Projects"],
                "summary": "Get Project",
                "description": "Retrieve a project by its name.",
                "operationId": "get_project",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Project not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Projects"],
                "summary": "Create Project",
                "description": "Create a new project.\n\nSince project has no ID, and a unique name is used as its\nidentifier, use PUT request with the name provided in the URL\nto create a new project.\n\nThis is different from the rest of the entities, which use POST\nrequests to create new entities with a unique ID.\n\nImportant: this endpoint only creates a project entity. It does\nnot handle creating its anatomy and assigning users to the project,\nso it should be used only in special cases, when you need a granular\ncontrol over a project creation process. Use `Deploy project`\n([POST] /api/projects) for general usage.",
                "operationId": "create_project",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPostModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": { "description": "Project created", "content": {} },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Project already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 409,
                                    "detail": "Project already exists"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Projects"],
                "summary": "Delete Project",
                "description": "Delete a given project including all its entities.",
                "operationId": "delete_project",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Projects"],
                "summary": "Update Project",
                "description": "Patch a project.\n\nUse a PATCH request to partially update a project.\nFor example change the name or a particular key in 'data'.",
                "operationId": "update_project",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectPatchModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/stats": {
            "get": {
                "tags": ["Projects"],
                "summary": "Get Project Stats",
                "description": "Retrieve a project statistics by its name.",
                "operationId": "get_project_stats",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/roots": {
            "get": {
                "tags": ["Projects"],
                "summary": "Get Project Roots Overrides",
                "description": "Return overrides for project roots.\n\nThis endpoint is used to get overrides for project roots.\nThe result is an a dictionary with site_id as a key and\na dictionary with root names as keys and root paths as values.",
                "operationId": "get_project_roots_overrides",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Project not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/roots/{site_id}": {
            "put": {
                "tags": ["Projects"],
                "summary": "Set Project Roots Overrides",
                "operationId": "set_project_roots_overrides",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Site Id", "type": "string" },
                        "name": "site_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Payload",
                                "type": "object",
                                "additionalProperties": { "type": "string" }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/repreContextFilter": {
            "post": {
                "tags": ["Representations"],
                "summary": "Representation Context Filter",
                "description": "Return representation IDs matching the given criteria.",
                "operationId": "representation_context_filter",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LookupRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LookupResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/representations/{representation_id}": {
            "get": {
                "tags": ["Representations"],
                "summary": "Get Representation",
                "description": "Retrieve a representation by its ID.",
                "operationId": "get_representation",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Version ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "representation_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RepresentationModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Representations not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Representations not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Representations"],
                "summary": "Delete Representation",
                "description": "Delete a representation.",
                "operationId": "delete_representation",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Version ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "representation_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Representations"],
                "summary": "Update Representation",
                "description": "Patch (partially update) a representation.",
                "operationId": "update_representation",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Version ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "representation_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RepresentationPatchModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/representations": {
            "post": {
                "tags": ["Representations"],
                "summary": "Create Representation",
                "description": "Create a new representation.",
                "operationId": "create_representation",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RepresentationPostModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Coflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": { "code": 409, "detail": "Coflict" }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/roles/_schema": {
            "get": {
                "tags": ["Roles"],
                "summary": "Get Role Schema",
                "operationId": "get_role_schema",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/roles/{project_name}": {
            "get": {
                "tags": ["Roles"],
                "summary": "Get Roles",
                "description": "Get a list of roles for a given project",
                "operationId": "get_roles",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Project name", "type": "string" },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/roles/{role_name}/{project_name}": {
            "get": {
                "tags": ["Roles"],
                "summary": "Get Role",
                "description": "Get a role definition",
                "operationId": "get_role",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Role name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "role_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Project name", "type": "string" },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Permissions"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Roles"],
                "summary": "Save Role",
                "description": "Create or update a user role.\n\nUse `_` as a project name to save a global role.",
                "operationId": "save_role",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Role name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "role_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Project name", "type": "string" },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Data",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Permissions"
                                    }
                                ],
                                "description": "Set of role permissions"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": { "description": "Role created", "content": {} },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Roles"],
                "summary": "Delete Role",
                "description": "Delete a user role",
                "operationId": "delete_role",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Role name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "role_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Project name", "type": "string" },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services": {
            "get": {
                "tags": ["Services"],
                "summary": "List Services",
                "operationId": "list_services",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceListModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/{name}": {
            "put": {
                "tags": ["Services"],
                "summary": "Spawn Service",
                "operationId": "spawn_service",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Name", "type": "string" },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpawnServiceRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": { "description": "Successful Response" },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Services"],
                "summary": "Delete Service",
                "operationId": "delete_service",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Name", "type": "string" },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Services"],
                "summary": "Patch Service",
                "operationId": "patch_service",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Name", "type": "string" },
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchServiceRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": { "description": "Successful Response" },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hosts": {
            "get": {
                "tags": ["Services"],
                "summary": "List Hosts",
                "description": "Return a list of all hosts.\n\nA host is an instance of AYON Service Host (ASH) that is capable of\nrunning addon services. A host record in the database is created\nautomatically when the host sends a heartbeat to the API.",
                "operationId": "list_hosts",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostListResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/hosts/heartbeat": {
            "post": {
                "tags": ["Services"],
                "summary": "Host Heartbeat",
                "description": "Send a heartbeat from a host.\n\nThis endpoint is called by ASH to send a heartbeat to the API. The\nheartbeat contains information about the host, its health and the\nstate of its services",
                "operationId": "host_heartbeat",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HeartbeatRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HeartbeatResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/settings/addons": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get All Addons Settings",
                "description": "Return all addon settings for the project.",
                "operationId": "get_all_addons_settings",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Settings variant",
                            "enum": ["production", "staging"],
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Project",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Site",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddonSettingsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/settings/addons/siteSettings": {
            "get": {
                "tags": ["Addon settings"],
                "summary": "Get All Site Settings",
                "description": "Return site settings for all enabled addons.\n\nThose are 'global' site settings (from addon.site_settings_model)\nwith no project overrides. When site is not specified, it will\nreturn the default settings provided by the model.",
                "operationId": "get_all_site_settings",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Settings variant",
                            "enum": ["production", "staging"],
                            "type": "string",
                            "default": "production"
                        },
                        "name": "variant",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Site",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddonSettingsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/subsets/{subset_id}": {
            "get": {
                "tags": ["Subsets"],
                "summary": "Get Subset",
                "description": "Retrieve a subset by its ID.",
                "operationId": "get_subset",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Subset ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "subset_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubsetModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Subset not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Subset not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Subsets"],
                "summary": "Delete Subset",
                "description": "Delete a subset.",
                "operationId": "delete_subset",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Subset ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "subset_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Subsets"],
                "summary": "Update Subset",
                "description": "Patch (partially update) a subset.",
                "operationId": "update_subset",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Subset ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "subset_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubsetPatchModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/subsets": {
            "post": {
                "tags": ["Subsets"],
                "summary": "Create Subset",
                "description": "Create a new subset.",
                "operationId": "create_subset",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubsetPostModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Coflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": { "code": 409, "detail": "Coflict" }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/info": {
            "get": {
                "tags": ["System"],
                "summary": "Get Site Info",
                "description": "Return site information.\n\nThis is the initial endpoint that is called when the user opens the page.\nIt returns information about the site, the current user and the configuration.\n\nIf the user is not logged in, only the message of the day and the API version\nare returned.",
                "operationId": "get_site_info",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/metrics": {
            "get": {
                "tags": ["System"],
                "summary": "Get System Metrics",
                "operationId": "get_system_metrics",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "text/plain": { "schema": { "type": "string" } }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/system/restart": {
            "post": {
                "tags": ["System"],
                "summary": "Request Server Restart",
                "operationId": "request_server_restart",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/tasks/{task_id}": {
            "get": {
                "tags": ["Tasks"],
                "summary": "Get Task",
                "description": "Retrieve a task by its ID.",
                "operationId": "get_task",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Task ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "task_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tasks not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Tasks not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Tasks"],
                "summary": "Delete Task",
                "description": "Delete a task.",
                "operationId": "delete_task",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Task ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "task_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Tasks"],
                "summary": "Update Task",
                "description": "Patch (partially update) a task.",
                "operationId": "update_task",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Task ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "task_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPatchModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/tasks": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Create Task",
                "description": "Create a new task.\n\nUse a POST request to create a new task (with a new id).",
                "operationId": "create_task",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPostModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Specified folder does not exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 409,
                                    "detail": "Specified folder does not exist"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/tasks/{task_id}/assign": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Assign Users To Task",
                "description": "Change the list of users assigned to a task.",
                "operationId": "assign_users_to_task",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Task ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "task_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignUsersRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/teams": {
            "get": {
                "tags": ["Teams"],
                "summary": "Get Teams",
                "description": "Get all teams in a project.",
                "operationId": "get_teams",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Teams Api Projects  Project Name  Teams Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TeamListItemModel"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/teams/{team_name}": {
            "put": {
                "tags": ["Teams"],
                "summary": "Save Team",
                "description": "Save a team.",
                "operationId": "save_team",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Team Name", "type": "string" },
                        "name": "team_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TeamPutModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Teams"],
                "summary": "Delete Team",
                "description": "Delete a team.",
                "operationId": "delete_team",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Team Name", "type": "string" },
                        "name": "team_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/teams/{team_name}/members/{member_name}": {
            "put": {
                "tags": ["Teams"],
                "summary": "Save Team Member",
                "description": "Save a team member.",
                "operationId": "save_team_member",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Team Name", "type": "string" },
                        "name": "team_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Member Name", "type": "string" },
                        "name": "member_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TeamMemberModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Teams"],
                "summary": "Delete Team Member",
                "description": "Delete a team member.",
                "operationId": "delete_team_member",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Team Name", "type": "string" },
                        "name": "team_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": { "title": "Member Name", "type": "string" },
                        "name": "member_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/thumbnails": {
            "post": {
                "tags": ["Thumbnails"],
                "summary": "Create Thumbnail",
                "description": "Create a thumbnail.\n\nThis endpoint is used to create a thumbnail not associated with any entity.\nReturns the ID of the created thumbnail. which can be used to assign it to\nan entity.",
                "operationId": "create_thumbnail",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Content-Type", "type": "string" },
                        "name": "content-type",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateThumbnailResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/thumbnails/{thumbnail_id}": {
            "get": {
                "tags": ["Thumbnails"],
                "summary": "Get Thumbnail",
                "description": "Get a thumbnail by its ID.\n\nThis endpoint is used to retrieve a thumbnail by its ID.\nSince this is can be an security issue, this endpoint is only available\nto users with the `manager` role or higher.",
                "operationId": "get_thumbnail",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Thumbnail ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "thumbnail_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Thumbnails"],
                "summary": "Update Thumbnail",
                "description": "Create or update a thumbnail with a specific ID.\n\nThis endpoint is used to create or update a thumbnail by its ID.\nSince this is can be an security issue, this endpoint is only available\nto users with the `manager` role or higher.",
                "operationId": "update_thumbnail",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Thumbnail ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "thumbnail_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Content-Type", "type": "string" },
                        "name": "content-type",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/folders/{folder_id}/thumbnail": {
            "get": {
                "tags": ["Thumbnails"],
                "summary": "Get Folder Thumbnail",
                "operationId": "get_folder_thumbnail",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Folder ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "folder_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Thumbnails"],
                "summary": "Create Folder Thumbnail",
                "description": "Create a new thumbnail for a folder.\n\nReturns a thumbnail ID, which is also saved into the entity\ndatabase record.",
                "operationId": "create_folder_thumbnail",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Folder ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "folder_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Content-Type", "type": "string" },
                        "name": "content-type",
                        "in": "header"
                    }
                ],
                "responses": {
                    "201": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/versions/{version_id}/thumbnail": {
            "get": {
                "tags": ["Thumbnails"],
                "summary": "Get Version Thumbnail",
                "operationId": "get_version_thumbnail",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Version ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "version_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Thumbnails"],
                "summary": "Create Version Thumbnail",
                "operationId": "create_version_thumbnail",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Version ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "version_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Content-Type", "type": "string" },
                        "name": "content-type",
                        "in": "header"
                    }
                ],
                "responses": {
                    "201": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/workfiles/{workfile_id}/thumbnail": {
            "get": {
                "tags": ["Thumbnails"],
                "summary": "Get Workfile Thumbnail",
                "operationId": "get_workfile_thumbnail",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Workfile ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "workfile_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Thumbnails"],
                "summary": "Create Workfile Thumbnail",
                "operationId": "create_workfile_thumbnail",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Workfile ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "workfile_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Content-Type", "type": "string" },
                        "name": "content-type",
                        "in": "header"
                    }
                ],
                "responses": {
                    "201": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not_found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Not_found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/usd/resolve": {
            "post": {
                "tags": ["USD"],
                "summary": "Resolve",
                "operationId": "resolve",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResolveRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Unable to log in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Unable to log in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "tags": ["Users"],
                "summary": "List Users",
                "operationId": "list_users",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": { "application/json": { "schema": {} } }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/me": {
            "get": {
                "tags": ["Users"],
                "summary": "Get Current User",
                "description": "Return the current user information (based on the Authorization header).\nThis is used for a profile page as well as as an initial check to ensure\nthe user is still logged in.",
                "operationId": "get_current_user",
                "parameters": [
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user_name}": {
            "get": {
                "tags": ["Users"],
                "summary": "Get User",
                "description": "Return the current user information (based on the Authorization header).\nThis is used for a profile page as well as as an initial check to ensure\nthe user is still logged in.",
                "operationId": "get_user",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Users"],
                "summary": "Create User",
                "description": "Create a new user.",
                "operationId": "create_user",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewUserModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": { "description": "User created", "content": {} },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 409,
                                    "detail": "User already exists"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Users"],
                "summary": "Delete User",
                "operationId": "delete_user",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Users"],
                "summary": "Patch User",
                "operationId": "patch_user",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPatchModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user_name}/password": {
            "patch": {
                "tags": ["Users"],
                "summary": "Change Password",
                "operationId": "change_password",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user_name}/check_password": {
            "post": {
                "tags": ["Users"],
                "summary": "Check Password",
                "operationId": "check_password",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckPasswordRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user_name}/rename": {
            "patch": {
                "tags": ["Users"],
                "summary": "Change User Name",
                "operationId": "change_user_name",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeUserNameRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user_name}/sessions": {
            "get": {
                "tags": ["Users"],
                "summary": "Get User Sessions",
                "operationId": "get_user_sessions",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSessionsResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user_name}/sessions/{session_id}": {
            "delete": {
                "tags": ["Users"],
                "summary": "Delete User Session",
                "operationId": "delete_user_session",
                "parameters": [
                    {
                        "required": true,
                        "schema": { "title": "Session Id", "type": "string" },
                        "name": "session_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user_name}/roles": {
            "patch": {
                "tags": ["Users"],
                "summary": "Assign User Roles",
                "operationId": "assign_user_roles",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User name",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "user_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignRolesRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/versions/{version_id}": {
            "get": {
                "tags": ["Versions"],
                "summary": "Get Version",
                "description": "Retrieve a version by its ID.",
                "operationId": "get_version",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Version ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "version_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VersionModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Versions not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Versions not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Versions"],
                "summary": "Delete Version",
                "description": "Delete a version.",
                "operationId": "delete_version",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Version ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "version_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Versions"],
                "summary": "Update Version",
                "description": "Patch (partially update) a version.",
                "operationId": "update_version",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Version ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "version_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VersionPatchModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/versions": {
            "post": {
                "tags": ["Versions"],
                "summary": "Create Version",
                "description": "Create a new version.\n\nUse a POST request to create a new version (with a new id).",
                "operationId": "create_version",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VersionPostModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Coflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": { "code": 409, "detail": "Coflict" }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/workfiles/{workfile_id}": {
            "get": {
                "tags": ["Workfiles"],
                "summary": "Get Workfile",
                "description": "Retrieve a version by its ID.",
                "operationId": "get_workfile",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Workfile ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "workfile_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkfileModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Versions not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 404,
                                    "detail": "Versions not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Workfiles"],
                "summary": "Delete Workfile",
                "description": "Delete a workfile.",
                "operationId": "delete_workfile",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Workfile ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "workfile_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Workfiles"],
                "summary": "Update Workfile",
                "description": "Patch (partially update) a workfile.",
                "operationId": "update_workfile",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Workfile ID",
                            "maxLength": 32,
                            "minLength": 32,
                            "pattern": "^[0-9a-f]{32}$",
                            "type": "string"
                        },
                        "example": "af10c8f0e9b111e9b8f90242ac130003",
                        "name": "workfile_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkfilePatchModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": { "description": "Successful Response" },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{project_name}/workfiles": {
            "post": {
                "tags": ["Workfiles"],
                "summary": "Create Workfile",
                "description": "Create a new version.\n\nUse a POST request to create a new version (with a new id).",
                "operationId": "create_workfile",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project name",
                            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                            "type": "string"
                        },
                        "name": "project_name",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": { "title": "Token", "type": "string" },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Sender", "type": "string" },
                        "name": "x-sender",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "X-As-User",
                            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                            "type": "string"
                        },
                        "name": "x-as-user",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": { "title": "X-Api-Key", "type": "string" },
                        "name": "x-api-key",
                        "in": "header"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Authorization",
                            "type": "string"
                        },
                        "name": "authorization",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkfilePostModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 401,
                                    "detail": "Not logged in"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": {
                                    "code": 403,
                                    "detail": "Access denied"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "example": { "code": 409, "detail": "Conflict" }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ActivityResponseModel": {
                "title": "ActivityResponseModel",
                "required": ["activity"],
                "type": "object",
                "properties": {
                    "activity": {
                        "title": "Activity",
                        "type": "array",
                        "items": { "type": "integer" },
                        "description": "Activity per day normalized to 0-100",
                        "example": [0, 0, 0, 1, 12, 34, 32, 24, 25, 56, 18]
                    }
                },
                "description": "Base API model."
            },
            "AddonConfigRequest": {
                "title": "AddonConfigRequest",
                "type": "object",
                "properties": {
                    "copyVariant": {
                        "$ref": "#/components/schemas/VariantCopyRequest"
                    },
                    "versions": {
                        "title": "Versions",
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/AddonVersionConfig"
                        }
                    }
                },
                "description": "Base API model."
            },
            "AddonList": {
                "title": "AddonList",
                "required": ["addons"],
                "type": "object",
                "properties": {
                    "addons": {
                        "title": "Addons",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AddonListItem"
                        },
                        "description": "List of available addons"
                    }
                },
                "description": "Base API model."
            },
            "AddonListItem": {
                "title": "AddonListItem",
                "required": ["name", "title", "versions", "description"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Machine friendly name of the addon"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string",
                        "description": "Human friendly title of the addon"
                    },
                    "versions": {
                        "title": "Versions",
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/VersionInfo"
                        },
                        "description": "List of available versions"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Addon description"
                    },
                    "productionVersion": {
                        "title": "Productionversion",
                        "type": "string",
                        "description": "Production version of the addon"
                    },
                    "stagingVersion": {
                        "title": "Stagingversion",
                        "type": "string",
                        "description": "Staging version of the addon"
                    }
                },
                "description": "Base API model."
            },
            "AddonSettingsResponse": {
                "title": "AddonSettingsResponse",
                "required": ["settings", "versions"],
                "type": "object",
                "properties": {
                    "settings": {
                        "title": "Addon settings",
                        "type": "object",
                        "additionalProperties": { "type": "object" },
                        "description": "Addon settings for each active addon",
                        "example": {
                            "my-addon": {
                                "my-setting": "my-value",
                                "my-other-setting": "my-other-value"
                            }
                        }
                    },
                    "versions": {
                        "title": "Addon versions",
                        "type": "object",
                        "additionalProperties": { "type": "string" },
                        "description": "Active versions of the addon for the given variant",
                        "example": { "my-addon": "1.0.0" }
                    }
                },
                "description": "Base API model."
            },
            "AddonVersionConfig": {
                "title": "AddonVersionConfig",
                "type": "object",
                "properties": {
                    "productionVersion": {
                        "title": "Productionversion",
                        "type": "string"
                    },
                    "stagingVersion": {
                        "title": "Stagingversion",
                        "type": "string"
                    }
                },
                "description": "Base API model."
            },
            "AgentInfo": {
                "title": "AgentInfo",
                "type": "object",
                "properties": {
                    "platform": { "title": "Platform", "type": "string" },
                    "client": { "title": "Client", "type": "string" },
                    "device": { "title": "Device", "type": "string" }
                }
            },
            "Anatomy": {
                "title": "Project anatomy",
                "type": "object",
                "properties": {
                    "roots": {
                        "title": "Roots",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/Root" },
                        "description": "Setup root paths for the project",
                        "default": [
                            {
                                "name": "work",
                                "windows": "C:/projects",
                                "linux": "/mnt/share/projects",
                                "darwin": "/Volumes/projects"
                            }
                        ]
                    },
                    "templates": {
                        "title": "Templates",
                        "allOf": [{ "$ref": "#/components/schemas/Templates" }],
                        "description": "Path templates configuration"
                    },
                    "attributes": {
                        "title": "Attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ayon_server__settings__anatomy__ProjectAttribModel"
                            }
                        ],
                        "description": "Attributes configuration"
                    },
                    "folder_types": {
                        "title": "Folder Types",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/FolderType" },
                        "description": "Folder types configuration",
                        "default": [
                            { "name": "Folder", "icon": "folder" },
                            { "name": "Library", "icon": "category" },
                            { "name": "Episode", "icon": "live_tv" },
                            { "name": "Asset", "icon": "smart_toy" },
                            { "name": "Shot", "icon": "movie" },
                            { "name": "Sequence", "icon": "theaters" }
                        ]
                    },
                    "task_types": {
                        "title": "Task Types",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/TaskType" },
                        "description": "Task types configuration",
                        "default": [
                            {
                                "name": "Generic",
                                "shortName": "gener",
                                "icon": "task_alt"
                            },
                            {
                                "name": "Art",
                                "shortName": "art",
                                "icon": "palette"
                            },
                            {
                                "name": "Modeling",
                                "shortName": "mdl",
                                "icon": "language"
                            },
                            {
                                "name": "Texture",
                                "shortName": "tex",
                                "icon": "brush"
                            },
                            {
                                "name": "Lookdev",
                                "shortName": "look",
                                "icon": "ev_shadow"
                            },
                            {
                                "name": "Rigging",
                                "shortName": "rig",
                                "icon": "construction"
                            },
                            {
                                "name": "Edit",
                                "shortName": "edit",
                                "icon": "imagesearch_roller"
                            },
                            {
                                "name": "Layout",
                                "shortName": "lay",
                                "icon": "nature_people"
                            },
                            {
                                "name": "Setdress",
                                "shortName": "dress",
                                "icon": "scene"
                            },
                            {
                                "name": "Animation",
                                "shortName": "anim",
                                "icon": "directions_run"
                            },
                            {
                                "name": "FX",
                                "shortName": "fx",
                                "icon": "fireplace"
                            },
                            {
                                "name": "Lighting",
                                "shortName": "lgt",
                                "icon": "highlight"
                            },
                            {
                                "name": "Paint",
                                "shortName": "paint",
                                "icon": "video_stable"
                            },
                            {
                                "name": "Compositing",
                                "shortName": "comp",
                                "icon": "layers"
                            },
                            {
                                "name": "Roto",
                                "shortName": "roto",
                                "icon": "gesture"
                            },
                            {
                                "name": "Matchmove",
                                "shortName": "matchmove",
                                "icon": "switch_video"
                            }
                        ]
                    },
                    "statuses": {
                        "title": "Statuses",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/Status" },
                        "description": "Statuses configuration",
                        "default": [
                            {
                                "name": "Not ready",
                                "shortName": "NRD",
                                "state": "not_started",
                                "icon": "fiber_new",
                                "color": "#434a56"
                            },
                            {
                                "name": "Ready to start",
                                "shortName": "RDY",
                                "state": "not_started",
                                "icon": "timer",
                                "color": "#bababa"
                            },
                            {
                                "name": "In progress",
                                "shortName": "PRG",
                                "state": "in_progress",
                                "icon": "play_arrow",
                                "color": "#3498db"
                            },
                            {
                                "name": "Pending review",
                                "shortName": "RVW",
                                "state": "in_progress",
                                "icon": "visibility",
                                "color": "#ff9b0a"
                            },
                            {
                                "name": "Approved",
                                "shortName": "APP",
                                "state": "done",
                                "icon": "task_alt",
                                "color": "#00f0b4"
                            },
                            {
                                "name": "On hold",
                                "shortName": "HLD",
                                "state": "blocked",
                                "icon": "back_hand",
                                "color": "#fa6e46"
                            },
                            {
                                "name": "Omitted",
                                "shortName": "OMT",
                                "state": "blocked",
                                "icon": "block",
                                "color": "#cb1a1a"
                            }
                        ]
                    },
                    "tags": {
                        "title": "Tags",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/Tag" },
                        "description": "Tags configuration"
                    }
                }
            },
            "AnatomyPresetListItem": {
                "title": "AnatomyPresetListItem",
                "required": ["name", "primary", "version"],
                "type": "object",
                "properties": {
                    "name": { "title": "Name of the preset", "type": "string" },
                    "primary": {
                        "title": "Is this preset primary",
                        "type": "boolean"
                    },
                    "version": {
                        "title": "Version of the anatomy model",
                        "type": "string"
                    }
                },
                "description": "Base API model."
            },
            "AnatomyPresetListModel": {
                "title": "AnatomyPresetListModel",
                "required": ["version"],
                "type": "object",
                "properties": {
                    "version": {
                        "title": "Model version",
                        "type": "string",
                        "description": "Anatomy model version currently used in AYON"
                    },
                    "presets": {
                        "title": "List of anatomy presets",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AnatomyPresetListItem"
                        }
                    }
                },
                "description": "Base API model."
            },
            "AssignRolesRequestModel": {
                "title": "AssignRolesRequestModel",
                "type": "object",
                "properties": {
                    "roles": {
                        "title": "Roles",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RolesOnProject"
                        },
                        "description": "List of roles to assign",
                        "example": [
                            {
                                "project": "project1",
                                "roles": ["artist", "viewer"]
                            },
                            { "project": "project2", "roles": ["viewer"] }
                        ]
                    }
                },
                "description": "Base API model."
            },
            "AssignUsersRequestModel": {
                "title": "AssignUsersRequestModel",
                "required": ["mode", "users"],
                "type": "object",
                "properties": {
                    "mode": {
                        "title": "Mode",
                        "enum": ["add", "remove", "set"],
                        "type": "string",
                        "description": "What to do with the list of users",
                        "example": "add"
                    },
                    "users": {
                        "title": "Users",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "List of user names",
                        "example": ["Eeny", "Meeny", "Miny", "Moe"]
                    }
                },
                "description": "Assign users to a task."
            },
            "AttributeAccessList": {
                "title": "AttributeAccessList",
                "type": "object",
                "properties": {
                    "enabled": {
                        "title": "Enabled",
                        "type": "boolean",
                        "default": false
                    },
                    "attributes": {
                        "title": "Attributes",
                        "type": "array",
                        "items": { "type": "string" },
                        "enum_resolver": {}
                    }
                }
            },
            "AttributeData": {
                "title": "AttributeData",
                "required": ["type"],
                "type": "object",
                "properties": {
                    "type": {
                        "title": "Type",
                        "enum": [
                            "string",
                            "integer",
                            "float",
                            "boolean",
                            "datetime",
                            "list_of_strings",
                            "list_of_integers",
                            "list_of_any",
                            "dict"
                        ],
                        "type": "string",
                        "description": "Type of attribute value",
                        "example": "string"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string",
                        "description": "Nice, human readable title of the attribute",
                        "example": "My attribute"
                    },
                    "description": {
                        "title": "Field description",
                        "type": "string",
                        "example": "Value of my attribute"
                    },
                    "example": {
                        "title": "Field example",
                        "description": "Example value of the field.",
                        "example": "value1"
                    },
                    "default": {
                        "title": "Field default value",
                        "description": "Default value for the attribute. Do not set for list types."
                    },
                    "gt": {
                        "title": "Greater than",
                        "anyOf": [{ "type": "integer" }, { "type": "number" }]
                    },
                    "ge": {
                        "title": "Geater or equal",
                        "anyOf": [{ "type": "integer" }, { "type": "number" }]
                    },
                    "lt": {
                        "title": "Less",
                        "anyOf": [{ "type": "integer" }, { "type": "number" }]
                    },
                    "le": {
                        "title": "Less or equal",
                        "anyOf": [{ "type": "integer" }, { "type": "number" }]
                    },
                    "minLength": {
                        "title": "Minimum length",
                        "type": "integer"
                    },
                    "maxLength": {
                        "title": "Maximum length",
                        "type": "integer"
                    },
                    "minItems": {
                        "title": "Minimum items",
                        "type": "integer",
                        "description": "Minimum number of items in list type."
                    },
                    "maxItems": {
                        "title": "Maximum items",
                        "type": "integer",
                        "description": "Only for list types. Maximum number of items in the list."
                    },
                    "regex": {
                        "title": "Field regex",
                        "type": "string",
                        "description": "Only for string types. The value must match this regex.",
                        "example": "^[a-zA-Z0-9_]+$"
                    },
                    "enum": {
                        "title": "Field enum",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeEnumItem"
                        },
                        "description": "List of enum items used for displaying select/multiselect widgets",
                        "example": [
                            { "value": "value1", "label": "Value 1" },
                            { "value": "value2", "label": "Value 2" },
                            { "value": "value3", "label": "Value 3" }
                        ]
                    },
                    "inherit": {
                        "title": "Inherit",
                        "type": "boolean",
                        "description": "Inherit the attribute value from the parent entity.",
                        "default": true
                    }
                },
                "description": "Base API model."
            },
            "AttributeEnumItem": {
                "title": "AttributeEnumItem",
                "required": ["value", "label"],
                "type": "object",
                "properties": {
                    "value": { "title": "Enum value" },
                    "label": { "title": "Enum label", "type": "string" }
                },
                "description": "Attribute enum item."
            },
            "AttributeModel": {
                "title": "AttributeModel",
                "required": ["name", "position", "builtin", "data"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "pattern": "^[a-zA-Z0-9]{2,30}$",
                        "type": "string",
                        "example": "my_attribute",
                        "name": "Attribute name"
                    },
                    "position": {
                        "title": "Positon",
                        "type": "integer",
                        "description": "Default order",
                        "example": 12
                    },
                    "scope": {
                        "title": "Scope",
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "folder",
                                        "subset",
                                        "version",
                                        "representation",
                                        "task",
                                        "workfile"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "enum": ["project", "user"],
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "List of entity types the attribute is available on",
                        "example": ["folder", "task"]
                    },
                    "builtin": {
                        "title": "Builtin",
                        "type": "boolean",
                        "description": "Is attribute builtin. Built-in attributes cannot be removed."
                    },
                    "data": { "$ref": "#/components/schemas/AttributeData" }
                },
                "description": "Base API model."
            },
            "AttributePutModel": {
                "title": "AttributePutModel",
                "required": ["position", "builtin", "data"],
                "type": "object",
                "properties": {
                    "position": {
                        "title": "Positon",
                        "type": "integer",
                        "description": "Default order",
                        "example": 12
                    },
                    "scope": {
                        "title": "Scope",
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "folder",
                                        "subset",
                                        "version",
                                        "representation",
                                        "task",
                                        "workfile"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "enum": ["project", "user"],
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "List of entity types the attribute is available on",
                        "example": ["folder", "task"]
                    },
                    "builtin": {
                        "title": "Builtin",
                        "type": "boolean",
                        "description": "Is attribute builtin. Built-in attributes cannot be removed."
                    },
                    "data": { "$ref": "#/components/schemas/AttributeData" }
                },
                "description": "Base API model."
            },
            "ChangePasswordRequestModel": {
                "title": "ChangePasswordRequestModel",
                "type": "object",
                "properties": {
                    "password": {
                        "title": "Password",
                        "type": "string",
                        "description": "New password",
                        "example": "5up3r5ecr3t_p455W0rd.123"
                    },
                    "apiKey": {
                        "title": "API Key",
                        "pattern": "^[0-9a-f]{32}$",
                        "type": "string",
                        "description": "API Key to set to a service user",
                        "example": "1cb4f6a89012a4b6d8a01ee4f67ae0fb"
                    }
                },
                "description": "Base API model."
            },
            "ChangeUserNameRequestModel": {
                "title": "ChangeUserNameRequestModel",
                "required": ["newName"],
                "type": "object",
                "properties": {
                    "newName": {
                        "title": "Newname",
                        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                        "type": "string",
                        "description": "New user name",
                        "example": "EvenBetterUser"
                    }
                },
                "description": "Base API model."
            },
            "CheckPasswordRequestModel": {
                "title": "CheckPasswordRequestModel",
                "required": ["password"],
                "type": "object",
                "properties": {
                    "password": {
                        "title": "Password",
                        "type": "string",
                        "example": "5up3r5ecr3t_p455W0rd.123"
                    }
                },
                "description": "Base API model."
            },
            "ClientInfo": {
                "title": "ClientInfo",
                "required": ["ip"],
                "type": "object",
                "properties": {
                    "ip": { "title": "Ip", "type": "string" },
                    "languages": {
                        "title": "Languages",
                        "type": "array",
                        "items": { "type": "string" }
                    },
                    "location": { "$ref": "#/components/schemas/LocationInfo" },
                    "agent": { "$ref": "#/components/schemas/AgentInfo" },
                    "site_id": { "title": "Site Id", "type": "string" }
                }
            },
            "ContextFilterModel": {
                "title": "ContextFilterModel",
                "required": ["key", "values"],
                "type": "object",
                "properties": {
                    "key": {
                        "title": "Context key",
                        "type": "string",
                        "example": "task.name"
                    },
                    "values": {
                        "title": "Possible values",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "List of regular expressions which at least one must match",
                        "example": ["^work.*$"]
                    }
                },
                "description": "Base API model."
            },
            "CreateLinkRequestModel": {
                "title": "CreateLinkRequestModel",
                "required": ["input", "output", "link"],
                "type": "object",
                "properties": {
                    "input": {
                        "title": "Input",
                        "type": "string",
                        "description": "The ID of the input entity."
                    },
                    "output": {
                        "title": "Output",
                        "type": "string",
                        "description": "The ID of the output entity."
                    },
                    "link": {
                        "title": "Link",
                        "type": "string",
                        "description": "The name of the link type to create.",
                        "example": "reference|folder|version"
                    }
                },
                "description": "Request model for creating a link."
            },
            "CreateThumbnailResponseModel": {
                "title": "CreateThumbnailResponseModel",
                "required": ["id"],
                "type": "object",
                "properties": { "id": { "title": "Id", "type": "string" } },
                "description": "Base API model."
            },
            "CustomTemplate": {
                "title": "CustomTemplate",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": { "title": "Template name", "type": "string" }
                }
            },
            "DeliveryTemplate": {
                "title": "DeliveryTemplate",
                "required": ["name", "directory", "file"],
                "type": "object",
                "properties": {
                    "name": { "title": "Template name", "type": "string" },
                    "directory": {
                        "title": "Directory template",
                        "type": "string"
                    },
                    "file": { "title": "File name template", "type": "string" }
                }
            },
            "DependencyPackage": {
                "title": "DependencyPackage",
                "required": ["name", "platform", "size", "checksum"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Name of the package"
                    },
                    "platform": {
                        "title": "Platform",
                        "enum": ["windows", "linux", "darwin"],
                        "type": "string",
                        "description": "Platform of the package"
                    },
                    "size": {
                        "title": "Size",
                        "type": "integer",
                        "description": "Size of the package in bytes"
                    },
                    "checksum": {
                        "title": "Checksum",
                        "type": "string",
                        "description": "Checksum of the package"
                    },
                    "checksumAlgorithm": {
                        "title": "Checksum algorithm",
                        "enum": ["md5"],
                        "type": "string",
                        "description": "Algorithm used to calculate the checksum",
                        "default": "md5"
                    },
                    "supportedAddons": {
                        "title": "Supported addons",
                        "type": "object",
                        "additionalProperties": { "type": "string" },
                        "description": "Supported addons and their versions {addon_name: version}"
                    },
                    "pythonModules": {
                        "title": "Pythonmodules",
                        "type": "object",
                        "additionalProperties": { "type": "string" },
                        "description": "Python modules {module_name: version} included in the package"
                    },
                    "sources": {
                        "title": "Package sources",
                        "type": "array",
                        "items": { "type": "object" },
                        "description": "List of sources from which the package was downloaded",
                        "example": [
                            {
                                "type": "server",
                                "filename": "win_ayon_package_1.0.0.zip"
                            },
                            {
                                "type": "http",
                                "url": "https://example.com/win_ayon_package_1.0.0.zip"
                            }
                        ]
                    }
                },
                "description": "Each source is a dict with the type of the source as key and the value,\nthe rest of the fields depend on the type of the source.\n\ntype: \"server\" is added automatically by the server,\nif the package was uploaded to the server."
            },
            "DependencyPackageList": {
                "title": "DependencyPackageList",
                "type": "object",
                "properties": {
                    "packages": {
                        "title": "Packages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DependencyPackage"
                        }
                    },
                    "productionPackage": {
                        "title": "Productionpackage",
                        "type": "string"
                    }
                },
                "description": "Base API model."
            },
            "DeployProjectRequestModel": {
                "title": "DeployProjectRequestModel",
                "required": ["name", "anatomy"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Project name"
                    },
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "description": "Project code"
                    },
                    "anatomy": {
                        "title": "Anatomy",
                        "allOf": [{ "$ref": "#/components/schemas/Anatomy" }],
                        "description": "Project anatomy"
                    },
                    "library": {
                        "title": "Library",
                        "type": "boolean",
                        "description": "Library project",
                        "default": false
                    }
                },
                "description": "Base API model."
            },
            "DispatchEventRequestModel": {
                "title": "DispatchEventRequestModel",
                "required": ["topic"],
                "type": "object",
                "properties": {
                    "topic": {
                        "title": "Topic",
                        "pattern": "^[a-zA-Z][a-zA-Z0-9_\\.\\*]{2,64}$",
                        "type": "string",
                        "description": "Topic of the event",
                        "example": "log.info"
                    },
                    "sender": {
                        "title": "Sender",
                        "type": "string",
                        "description": "Identifier of the process that sent the event."
                    },
                    "hash": { "title": "Hash", "type": "string" },
                    "project": {
                        "title": "Project name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "Name of the project if the event belong to one.",
                        "example": "MyProject"
                    },
                    "dependsOn": {
                        "title": "Depends on",
                        "maxLength": 32,
                        "minLength": 32,
                        "type": "string"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Human-readable event description.",
                        "default": ""
                    },
                    "summary": {
                        "title": "Summary",
                        "type": "object",
                        "description": "Arbitrary topic-specific data sent to clients in real time"
                    },
                    "payload": {
                        "title": "Payload",
                        "type": "object",
                        "description": "Full event payload. Only avaiable in REST endpoint."
                    },
                    "finished": {
                        "title": "Finished",
                        "type": "boolean",
                        "description": "Is event finished (one shot event)",
                        "default": true,
                        "example": true
                    },
                    "store": {
                        "title": "Store",
                        "type": "boolean",
                        "description": "Set to False to not store one-shot event in database.",
                        "default": true,
                        "example": true
                    }
                },
                "description": "Base API model."
            },
            "DispatchEventResponseModel": {
                "title": "DispatchEventResponseModel",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Event ID",
                        "maxLength": 32,
                        "minLength": 32,
                        "type": "string",
                        "description": "ID of the created event."
                    }
                },
                "description": "Base API model."
            },
            "EndpointsAccessList": {
                "title": "EndpointsAccessList",
                "type": "object",
                "properties": {
                    "enabled": {
                        "title": "Enabled",
                        "type": "boolean",
                        "default": false
                    },
                    "endpoints": {
                        "title": "Endpoints",
                        "type": "array",
                        "items": { "type": "string" }
                    }
                }
            },
            "EnrollRequestModel": {
                "title": "EnrollRequestModel",
                "required": ["sourceTopic", "targetTopic", "sender"],
                "type": "object",
                "properties": {
                    "sourceTopic": {
                        "title": "Source topic",
                        "type": "string",
                        "example": "ftrack.update"
                    },
                    "targetTopic": {
                        "title": "Target topic",
                        "type": "string",
                        "example": "ftrack.sync_to_ayon"
                    },
                    "sender": {
                        "title": "Sender",
                        "type": "string",
                        "example": "workerservice01"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Short, human readable description of the target event",
                        "example": "Sync Ftrack project to AYON"
                    },
                    "sequential": {
                        "title": "Sequential",
                        "type": "boolean",
                        "description": "Ensure events are processed in sequential order",
                        "default": false,
                        "example": true
                    }
                },
                "description": "Base API model."
            },
            "EnrollResponseModel": {
                "title": "EnrollResponseModel",
                "required": ["id", "dependsOn", "hash"],
                "type": "object",
                "properties": {
                    "id": { "title": "Id", "type": "string" },
                    "dependsOn": { "title": "Dependson", "type": "string" },
                    "hash": { "title": "Hash", "type": "string" },
                    "status": {
                        "title": "Status",
                        "type": "string",
                        "default": "pending"
                    }
                },
                "description": "Base API model."
            },
            "EntityCounts": {
                "title": "EntityCounts",
                "required": [
                    "folders",
                    "subsets",
                    "versions",
                    "representations",
                    "tasks",
                    "workfiles"
                ],
                "type": "object",
                "properties": {
                    "folders": {
                        "title": "Folders",
                        "type": "integer",
                        "description": "Number of folders",
                        "example": 10
                    },
                    "subsets": {
                        "title": "Subsets",
                        "type": "integer",
                        "description": "Number of subsets",
                        "example": 98
                    },
                    "versions": {
                        "title": "Versions",
                        "type": "integer",
                        "description": "Number of versions",
                        "example": 512
                    },
                    "representations": {
                        "title": "Representations",
                        "type": "integer",
                        "description": "Number of representations",
                        "example": 4853
                    },
                    "tasks": {
                        "title": "Tasks",
                        "type": "integer",
                        "description": "Number of tasks",
                        "example": 240
                    },
                    "workfiles": {
                        "title": "Workfiles",
                        "type": "integer",
                        "description": "Number of workfiles",
                        "example": 190
                    }
                },
                "description": "Base API model."
            },
            "EntityIdResponse": {
                "title": "EntityIdResponse",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Entity ID",
                        "maxLength": 32,
                        "minLength": 32,
                        "pattern": "^[0-9a-f]{32}$",
                        "type": "string",
                        "description": "Entity ID",
                        "example": "af10c8f0e9b111e9b8f90242ac130003"
                    }
                },
                "description": "Base API model."
            },
            "ErrorResponse": {
                "title": "ErrorResponse",
                "required": ["code", "detail"],
                "type": "object",
                "properties": {
                    "code": { "title": "Code", "type": "integer" },
                    "detail": { "title": "Detail", "type": "string" }
                },
                "description": "Base API model."
            },
            "EventModel": {
                "title": "EventModel",
                "required": ["hash", "topic", "description"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "maxLength": 32,
                        "minLength": 32,
                        "pattern": "^[0-9a-f]{32}$",
                        "type": "string",
                        "example": "af10c8f0e9b111e9b8f90242ac130003"
                    },
                    "hash": { "title": "Hash", "type": "string" },
                    "topic": { "title": "Topic", "type": "string" },
                    "sender": { "title": "Sender", "type": "string" },
                    "project": { "title": "Project", "type": "string" },
                    "user": { "title": "User", "type": "string" },
                    "dependsOn": {
                        "title": "Dependson",
                        "maxLength": 32,
                        "minLength": 32,
                        "pattern": "^[0-9a-f]{32}$",
                        "type": "string",
                        "example": "af10c8f0e9b111e9b8f90242ac130003"
                    },
                    "status": {
                        "title": "Status",
                        "enum": [
                            "pending",
                            "in_progress",
                            "finished",
                            "failed",
                            "aborted",
                            "restarted"
                        ],
                        "type": "string",
                        "default": "pending"
                    },
                    "retries": {
                        "title": "Retries",
                        "type": "integer",
                        "default": 0
                    },
                    "description": { "title": "Description", "type": "string" },
                    "summary": { "title": "Summary", "type": "object" },
                    "payload": { "title": "Payload", "type": "object" },
                    "createdAt": {
                        "title": "Createdat",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "title": "Updatedat",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "ID is an automatically assigned primary identifier of the event.\nApart from uniqueness, it does not have any special meaning. But it is used\nfor dependencies and hashing.\n\nHash is an unique value for an evend, which is per-topic deterministic.\nThis prevents storing two identical events by two different dispatchers.\nFor example 'enroll' endpoint, which is responsible to create new processing\njobs uses hash of source event id and the target topic. that effectively\nprevents two services starting the same job.\n\nDepends_on is nullable field, when used, it contains an ID of previously\nfinished event which this event depends.\nTBD: when a dependency is restarted, should all dependent\nevents be restarted as well?"
            },
            "FilesystemSourceInfo": {
                "title": "FilesystemSourceInfo",
                "type": "object",
                "properties": {
                    "type": {
                        "title": "Type",
                        "enum": ["filesystem"],
                        "type": "string",
                        "default": "filesystem"
                    },
                    "path": { "$ref": "#/components/schemas/PathDefinition" }
                },
                "description": "Base API model."
            },
            "FolderAccess": {
                "title": "FolderAccess",
                "type": "object",
                "properties": {
                    "access_type": {
                        "title": "Type",
                        "type": "string",
                        "default": "assigned",
                        "enum_resolver": {}
                    },
                    "path": { "title": "Path", "type": "string", "default": "" }
                }
            },
            "FolderAccessList": {
                "title": "FolderAccessList",
                "type": "object",
                "properties": {
                    "enabled": {
                        "title": "Enabled",
                        "type": "boolean",
                        "default": false
                    },
                    "access_list": {
                        "title": "Access List",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FolderAccess"
                        },
                        "layout": "compact"
                    }
                }
            },
            "FolderAttribModel": {
                "title": "FolderAttribModel",
                "type": "object",
                "properties": {
                    "resolutionWidth": {
                        "title": "Width",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Horizontal resolution",
                        "example": 1920
                    },
                    "resolutionHeight": {
                        "title": "Height",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Vertical resolution",
                        "example": 1080
                    },
                    "pixelAspect": {
                        "title": "Pixel aspect",
                        "type": "number",
                        "example": 1.0
                    },
                    "clipIn": {
                        "title": "Clip In",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Textual description of the entity",
                        "example": "A very nice entity"
                    },
                    "clipOut": {
                        "title": "Clip Out",
                        "type": "integer",
                        "example": 1
                    },
                    "frameStart": {
                        "title": "Start frame",
                        "type": "integer",
                        "example": 1001
                    },
                    "frameEnd": { "title": "End frame", "type": "integer" },
                    "handleStart": {
                        "title": "Handle start",
                        "type": "integer"
                    },
                    "handleEnd": { "title": "Handle end", "type": "integer" },
                    "fps": {
                        "title": "FPS",
                        "type": "number",
                        "description": "Frame rate",
                        "example": 25
                    },
                    "startDate": {
                        "title": "Start date",
                        "type": "string",
                        "description": "Date and time when the project or task or asset was started",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    },
                    "endDate": {
                        "title": "End date",
                        "type": "string",
                        "description": "Deadline date and time",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    }
                }
            },
            "FolderModel": {
                "title": "FolderModel",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Folder ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Unique identifier of the {entity_name}",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "name": {
                        "title": "Folder name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "bush"
                    },
                    "label": {
                        "title": "Folder label",
                        "pattern": "^[^';]*$",
                        "type": "string",
                        "example": "bush"
                    },
                    "folderType": {
                        "title": "Folder type",
                        "type": "string",
                        "example": "Asset"
                    },
                    "parentId": {
                        "title": "Parent ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Parent folder ID in the hierarchy",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "thumbnailId": {
                        "title": "Thumbnail ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "path": {
                        "title": "Path",
                        "type": "string",
                        "example": "assets/characters/st_javelin"
                    },
                    "attrib": {
                        "title": "Folder attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/FolderAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "Folder auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Folder active",
                        "type": "boolean",
                        "description": "Whether the folder is active",
                        "default": true
                    },
                    "ownAttrib": {
                        "title": "Own attributes",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["frameStart", "frameEnd"]
                    },
                    "status": {
                        "title": "Folder status",
                        "type": "string",
                        "description": "Status of the folder",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Folder tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the folder",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "createdAt": {
                        "title": "Created at",
                        "type": "string",
                        "description": "Time of creation",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    },
                    "updatedAt": {
                        "title": "Updated at",
                        "type": "string",
                        "description": "Time of last update",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    }
                }
            },
            "FolderPatchModel": {
                "title": "FolderPatchModel",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Folder name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "bush"
                    },
                    "label": {
                        "title": "Folder label",
                        "pattern": "^[^';]*$",
                        "type": "string",
                        "example": "bush"
                    },
                    "folderType": {
                        "title": "Folder type",
                        "type": "string",
                        "example": "Asset"
                    },
                    "parentId": {
                        "title": "Parent ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Parent folder ID in the hierarchy",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "thumbnailId": {
                        "title": "Thumbnail ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "status": {
                        "title": "Folder status",
                        "type": "string",
                        "description": "Status of the folder",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Folder tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the folder",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Folder attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/FolderAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "Folder auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Folder active",
                        "type": "boolean",
                        "description": "Whether the folder is active",
                        "default": true
                    }
                }
            },
            "FolderPostModel": {
                "title": "FolderPostModel",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Folder name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "bush"
                    },
                    "label": {
                        "title": "Folder label",
                        "pattern": "^[^';]*$",
                        "type": "string",
                        "example": "bush"
                    },
                    "folderType": {
                        "title": "Folder type",
                        "type": "string",
                        "example": "Asset"
                    },
                    "parentId": {
                        "title": "Parent ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Parent folder ID in the hierarchy",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "thumbnailId": {
                        "title": "Thumbnail ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "status": {
                        "title": "Folder status",
                        "type": "string",
                        "description": "Status of the folder",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Folder tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the folder",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Folder attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/FolderAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "Folder auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Folder active",
                        "type": "boolean",
                        "description": "Whether the folder is active",
                        "default": true
                    }
                }
            },
            "FolderType": {
                "title": "FolderType",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string"
                    },
                    "icon": {
                        "title": "Icon",
                        "type": "string",
                        "default": "folder"
                    },
                    "original_name": {
                        "title": "Original Name",
                        "type": "string",
                        "scope": []
                    }
                }
            },
            "GetAttributeListModel": {
                "title": "GetAttributeListModel",
                "type": "object",
                "properties": {
                    "attributes": {
                        "title": "Attributes configuration",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeModel"
                        }
                    }
                },
                "description": "Base API model."
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "Health": {
                "title": "Health",
                "required": ["completion", "storageUsage", "tasks", "statuses"],
                "type": "object",
                "properties": {
                    "completion": {
                        "title": "Completion",
                        "allOf": [
                            { "$ref": "#/components/schemas/HealthCompletion" }
                        ],
                        "description": "Task completion"
                    },
                    "storageUsage": {
                        "title": "Storageusage",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/HealthStorageUsage"
                            }
                        ],
                        "description": "Storage usage"
                    },
                    "tasks": {
                        "title": "Tasks",
                        "allOf": [
                            { "$ref": "#/components/schemas/HealthTasks" }
                        ],
                        "description": "Task statistics"
                    },
                    "statuses": {
                        "title": "Statuses",
                        "type": "object",
                        "additionalProperties": { "type": "integer" },
                        "description": "Task status statistics"
                    }
                },
                "description": "Base API model."
            },
            "HealthCompletion": {
                "title": "HealthCompletion",
                "required": ["percentage", "behind", "ahead"],
                "type": "object",
                "properties": {
                    "percentage": {
                        "title": "Percentage",
                        "type": "integer",
                        "description": "Percentage of tasks completed",
                        "example": 69
                    },
                    "behind": {
                        "title": "Behind",
                        "type": "integer",
                        "description": "Number of days tasks are not completed after due date",
                        "example": 5
                    },
                    "ahead": {
                        "title": "Ahead",
                        "type": "integer",
                        "description": "Number of days tasks are completed before due date",
                        "example": 3
                    }
                },
                "description": "Base API model."
            },
            "HealthStorageUsage": {
                "title": "HealthStorageUsage",
                "required": ["quota", "used"],
                "type": "object",
                "properties": {
                    "quota": {
                        "title": "Quota",
                        "type": "integer",
                        "description": "Storage quota",
                        "example": 1000000000
                    },
                    "used": {
                        "title": "Used",
                        "type": "integer",
                        "description": "Storage used",
                        "example": 500000000
                    }
                },
                "description": "Base API model."
            },
            "HealthTasks": {
                "title": "HealthTasks",
                "required": ["total", "completed", "overdue"],
                "type": "object",
                "properties": {
                    "total": {
                        "title": "Total",
                        "type": "integer",
                        "description": "Total number of tasks",
                        "example": 100
                    },
                    "completed": {
                        "title": "Completed",
                        "type": "integer",
                        "description": "Number of completed tasks",
                        "example": 50
                    },
                    "overdue": {
                        "title": "Overdue",
                        "type": "integer",
                        "description": "Number of overdue tasks",
                        "example": 10
                    }
                },
                "description": "Base API model."
            },
            "HeartbeatRequestModel": {
                "title": "HeartbeatRequestModel",
                "required": ["hostname", "health"],
                "type": "object",
                "properties": {
                    "hostname": { "title": "Hostname", "type": "string" },
                    "health": {
                        "$ref": "#/components/schemas/HostHealthModel"
                    },
                    "services": {
                        "title": "List of running services",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["ftrack-processor", "ftrack-event-server"]
                    }
                },
                "description": "Base API model."
            },
            "HeartbeatResponseModel": {
                "title": "HeartbeatResponseModel",
                "type": "object",
                "properties": {
                    "services": {
                        "title": "List of services that should be running",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/ServiceModel" }
                    }
                },
                "description": "Base API model."
            },
            "HeroTemplate": {
                "title": "HeroTemplate",
                "required": ["name", "directory", "file"],
                "type": "object",
                "properties": {
                    "name": { "title": "Template name", "type": "string" },
                    "directory": {
                        "title": "Directory template",
                        "type": "string"
                    },
                    "file": { "title": "File name template", "type": "string" }
                }
            },
            "HierarchyChangeModel": {
                "title": "HierarchyChangeModel",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Folder ID",
                        "maxLength": 32,
                        "minLength": 32,
                        "pattern": "^[0-9a-f]{32}$",
                        "type": "string",
                        "description": "Folder ID",
                        "example": "af10c8f0e9b111e9b8f90242ac130003"
                    },
                    "children": {
                        "title": "Children",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": []
                    }
                },
                "description": "Base API model."
            },
            "HierarchyFolderModel": {
                "title": "HierarchyFolderModel",
                "required": [
                    "id",
                    "name",
                    "label",
                    "status",
                    "hasTasks",
                    "taskNames",
                    "parents"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Folder ID",
                        "maxLength": 32,
                        "minLength": 32,
                        "pattern": "^[0-9a-f]{32}$",
                        "type": "string",
                        "description": "Folder ID",
                        "example": "af10c8f0e9b111e9b8f90242ac130003"
                    },
                    "name": {
                        "title": "Folder name",
                        "type": "string",
                        "example": "Tree"
                    },
                    "label": {
                        "title": "Folder label",
                        "type": "string",
                        "example": "Tree"
                    },
                    "status": {
                        "title": "Folder status",
                        "type": "string",
                        "example": "Tree"
                    },
                    "folderType": {
                        "title": "Folder type",
                        "type": "string",
                        "example": "AssetBuild"
                    },
                    "hasTasks": { "title": "Hastasks", "type": "boolean" },
                    "taskNames": {
                        "title": "Task names",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["Modeling", "Rigging"]
                    },
                    "parents": {
                        "title": "Parents",
                        "type": "array",
                        "items": { "type": "string" }
                    },
                    "children": {
                        "title": "List of children",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HierarchyFolderModel"
                        }
                    }
                },
                "description": "Base API model."
            },
            "HierarchyResponseModel": {
                "title": "HierarchyResponseModel",
                "required": ["detail", "projectName", "hierarchy"],
                "type": "object",
                "properties": {
                    "detail": { "title": "Detail", "type": "string" },
                    "projectName": { "title": "Projectname", "type": "string" },
                    "hierarchy": {
                        "title": "Hierarchy",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HierarchyFolderModel"
                        }
                    }
                },
                "description": "Base API model."
            },
            "HostHealthModel": {
                "title": "HostHealthModel",
                "type": "object",
                "properties": {
                    "cpu": {
                        "title": "CPU utilization",
                        "maximum": 100.0,
                        "minimum": 0.0,
                        "type": "number",
                        "default": 0,
                        "example": 0.5
                    },
                    "mem": {
                        "title": "RAM utilization",
                        "maximum": 100.0,
                        "minimum": 0.0,
                        "type": "number",
                        "default": 0,
                        "example": 42
                    }
                },
                "description": "Base API model."
            },
            "HostListResponseModel": {
                "title": "HostListResponseModel",
                "type": "object",
                "properties": {
                    "hosts": {
                        "title": "Hosts",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/HostModel" },
                        "description": "List of registered hosts"
                    }
                },
                "description": "Base API model."
            },
            "HostModel": {
                "title": "HostModel",
                "required": ["name", "lastSeen"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Host name",
                        "type": "string",
                        "example": "my-host"
                    },
                    "lastSeen": {
                        "title": "Last seen time",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-03-24T14:17:21.454744"
                    },
                    "health": {
                        "title": "Host health",
                        "allOf": [
                            { "$ref": "#/components/schemas/HostHealthModel" }
                        ],
                        "example": { "cpu": 0.5, "mem": 42 }
                    }
                },
                "description": "Base API model."
            },
            "HttpSourceInfo": {
                "title": "HttpSourceInfo",
                "required": ["url"],
                "type": "object",
                "properties": {
                    "type": {
                        "title": "Type",
                        "enum": ["http"],
                        "type": "string",
                        "default": "http"
                    },
                    "url": { "title": "Url", "type": "string" },
                    "headers": {
                        "title": "Headers",
                        "type": "object",
                        "additionalProperties": { "type": "string" }
                    }
                },
                "description": "Base API model."
            },
            "InfoResponseModel": {
                "title": "InfoResponseModel",
                "type": "object",
                "properties": {
                    "motd": {
                        "title": "Message of the day",
                        "type": "string",
                        "description": "Instance specific message to be displayed in the login page",
                        "default": "To access AYON dev server, you can sign in using your username and password, \nor use our **Discord** button for a more seamless login experience.\n\nPlease note that in order to use the Discord SSO, you need to be a member of **Ynput community** Discord server. \nIf you're not already a member, please join the server before attempting to use the Discord OAuth button.\n\nIf you choose to sign in using your username and password, please make sure that your login credentials are correct.\n"
                    },
                    "loginPageBackground": {
                        "title": "Loginpagebackground",
                        "type": "string"
                    },
                    "loginPageBrand": {
                        "title": "Loginpagebrand",
                        "type": "string",
                        "default": "/static/brand.svg"
                    },
                    "version": {
                        "title": "AYON version",
                        "type": "string",
                        "description": "Version of the AYON API",
                        "default": "1.0.0"
                    },
                    "uptime": { "title": "Uptime", "type": "number" },
                    "user": { "$ref": "#/components/schemas/UserModel" },
                    "attributes": {
                        "title": "Attributes",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeModel"
                        }
                    },
                    "sites": {
                        "title": "Sites",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/SiteInfo" }
                    }
                },
                "description": "Base API model."
            },
            "LinkTypeListResponse": {
                "title": "LinkTypeListResponse",
                "required": ["types"],
                "type": "object",
                "properties": {
                    "types": {
                        "title": "Types",
                        "type": "array",
                        "items": { "type": "object" },
                        "description": "List of link types",
                        "example": [
                            {
                                "name": "referene|version|version",
                                "link_type": "reference",
                                "input_type": "version",
                                "output_type": "version",
                                "data": {}
                            },
                            {
                                "name": "breakdown|folder|folder",
                                "link_type": "breakdown",
                                "input_type": "folder",
                                "output_type": "folder",
                                "data": {}
                            }
                        ]
                    }
                },
                "description": "Base API model."
            },
            "ListProjectsItemModel": {
                "title": "ListProjectsItemModel",
                "required": ["name", "code", "createdAt", "updatedAt"],
                "type": "object",
                "properties": {
                    "name": { "title": "Project name", "type": "string" },
                    "code": { "title": "Project code", "type": "string" },
                    "createdAt": {
                        "title": "Creation time",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "title": "Last modified time",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "Base API model."
            },
            "ListProjectsResponseModel": {
                "title": "ListProjectsResponseModel",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "string",
                        "default": "OK",
                        "example": "Showing LENGTH of COUNT projects"
                    },
                    "count": {
                        "title": "Count",
                        "type": "integer",
                        "description": "Total count of projects (regardless the pagination)",
                        "default": 0,
                        "example": 1
                    },
                    "projects": {
                        "title": "Projects",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListProjectsItemModel"
                        },
                        "description": "List of projects",
                        "default": [],
                        "example": [
                            {
                                "name": "Example project",
                                "code": "ex",
                                "createdAt": "2023-03-24T14:17:21.230542",
                                "updatedAt": "2023-03-24T14:17:21.230552"
                            }
                        ]
                    }
                },
                "description": "Base API model."
            },
            "LocationInfo": {
                "title": "LocationInfo",
                "type": "object",
                "properties": {
                    "country": { "title": "Country", "type": "string" },
                    "subdivision": { "title": "Subdivision", "type": "string" },
                    "city": { "title": "City", "type": "string" }
                }
            },
            "LoginRequestModel": {
                "title": "LoginRequestModel",
                "required": ["name", "password"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "User name",
                        "type": "string",
                        "description": "Username",
                        "example": "admin"
                    },
                    "password": {
                        "title": "Password",
                        "type": "string",
                        "description": "Password",
                        "example": "SecretPassword.123"
                    }
                },
                "description": "Base API model."
            },
            "LogoutResponseModel": {
                "title": "LogoutResponseModel",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Response detail",
                        "type": "string",
                        "description": "Text description, which may be displayed to the user",
                        "default": "Logged out",
                        "example": "Logged out"
                    }
                },
                "description": "Base API model."
            },
            "LookupRequestModel": {
                "title": "LookupRequestModel",
                "type": "object",
                "properties": {
                    "names": {
                        "title": "Representation names",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["ma", "obj"]
                    },
                    "versionIds": {
                        "title": "Version IDs",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["c10d5bc73dcab7da4cba0f3e0b3c0aea"]
                    },
                    "context": {
                        "title": "Context filters",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContextFilterModel"
                        }
                    }
                },
                "description": "Base API model."
            },
            "LookupResponseModel": {
                "title": "LookupResponseModel",
                "type": "object",
                "properties": {
                    "ids": {
                        "title": "Representation IDs",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "List of matching representation ids",
                        "example": ["c10d5bc73dcab7da4cba0f3e0b3c0aea"]
                    }
                },
                "description": "Base API model."
            },
            "ModifyOverridesRequestModel": {
                "title": "ModifyOverridesRequestModel",
                "required": ["action", "path"],
                "type": "object",
                "properties": {
                    "action": {
                        "title": "Action",
                        "enum": ["delete", "pin"],
                        "type": "string"
                    },
                    "path": {
                        "title": "Path",
                        "type": "array",
                        "items": { "type": "string" }
                    }
                },
                "description": "Base API model."
            },
            "NewUserModel": {
                "title": "NewUserModel",
                "type": "object",
                "properties": {
                    "attrib": {
                        "title": "User attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/UserAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "User auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "User active",
                        "type": "boolean",
                        "description": "Whether the user is active",
                        "default": true
                    },
                    "password": {
                        "title": "Password",
                        "type": "string",
                        "description": "Password for the new user"
                    }
                }
            },
            "OAuth2Option": {
                "title": "OAuth2Option",
                "required": ["name", "url", "client_id", "scope"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "OAuth2 provider name",
                        "example": "discord"
                    },
                    "url": {
                        "title": "Authorization URL",
                        "type": "string",
                        "description": "OAuth2 provider authorization URL",
                        "example": "https://discordapp.com/api/oauth2/authorize"
                    },
                    "client_id": {
                        "title": "Client ID",
                        "type": "string",
                        "description": "OAuth2 client ID",
                        "example": "934823948027719562"
                    },
                    "scope": {
                        "title": "Scope",
                        "type": "string",
                        "description": "Requested OAuth2 scopes",
                        "example": "identify email"
                    }
                },
                "description": "Client facing Oauth provider settings.\n\nThis is used to create a link to the Oauth provider's\nauthorization page."
            },
            "OAuth2Options": {
                "title": "OAuth2Options",
                "required": ["options"],
                "type": "object",
                "properties": {
                    "options": {
                        "title": "Options",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/OAuth2Option" }
                    }
                },
                "description": "List of client facing Oauth provider settings."
            },
            "OperationModel": {
                "title": "OperationModel",
                "required": ["type", "entityType"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Operation ID",
                        "type": "string",
                        "description": "identifier manually or automatically assigned to each operation"
                    },
                    "type": {
                        "title": "Operation type",
                        "enum": ["create", "update", "delete"],
                        "type": "string"
                    },
                    "entityType": {
                        "title": "Entity type",
                        "enum": [
                            "folder",
                            "subset",
                            "version",
                            "representation",
                            "task",
                            "workfile"
                        ],
                        "type": "string"
                    },
                    "entityId": {
                        "title": "Entity ID",
                        "type": "string",
                        "description": "ID of the entity. None for create"
                    },
                    "data": {
                        "title": "Data",
                        "type": "object",
                        "description": "Data to be used for create or update. Ignored for delete."
                    }
                },
                "description": "Base API model."
            },
            "OperationResponseModel": {
                "title": "OperationResponseModel",
                "required": ["id", "type", "success", "entityType"],
                "type": "object",
                "properties": {
                    "id": { "title": "Operation ID", "type": "string" },
                    "type": {
                        "title": "Operation type",
                        "enum": ["create", "update", "delete"],
                        "type": "string"
                    },
                    "success": {
                        "title": "Operation success",
                        "type": "boolean"
                    },
                    "detail": { "title": "Error message", "type": "string" },
                    "entityType": {
                        "title": "Entity type",
                        "enum": [
                            "folder",
                            "subset",
                            "version",
                            "representation",
                            "task",
                            "workfile"
                        ],
                        "type": "string"
                    },
                    "entityId": {
                        "title": "Entity ID",
                        "type": "string",
                        "description": "`None` if type is `create` and the operation fails."
                    }
                },
                "description": "Base API model."
            },
            "OperationsRequestModel": {
                "title": "OperationsRequestModel",
                "type": "object",
                "properties": {
                    "operations": {
                        "title": "Operations",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationModel"
                        }
                    },
                    "canFail": {
                        "title": "Canfail",
                        "type": "boolean",
                        "default": false
                    }
                },
                "description": "Base API model."
            },
            "OperationsResponseModel": {
                "title": "OperationsResponseModel",
                "required": ["success"],
                "type": "object",
                "properties": {
                    "operations": {
                        "title": "Operations",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationResponseModel"
                        }
                    },
                    "success": { "title": "Overall success", "type": "boolean" }
                },
                "description": "Base API model."
            },
            "PatchServiceRequestModel": {
                "title": "PatchServiceRequestModel",
                "type": "object",
                "properties": {
                    "shouldRun": { "title": "Shouldrun", "type": "boolean" }
                },
                "description": "Base API model."
            },
            "PathDefinition": {
                "title": "PathDefinition",
                "required": ["windows", "linux", "darwin"],
                "type": "object",
                "properties": {
                    "windows": { "title": "Windows", "type": "string" },
                    "linux": { "title": "Linux", "type": "string" },
                    "darwin": { "title": "Darwin", "type": "string" }
                },
                "description": "Base API model."
            },
            "Permissions": {
                "title": "Permissions",
                "type": "object",
                "properties": {
                    "create": {
                        "title": "Limit folder create",
                        "allOf": [
                            { "$ref": "#/components/schemas/FolderAccessList" }
                        ]
                    },
                    "read": {
                        "title": "Limit folder read",
                        "allOf": [
                            { "$ref": "#/components/schemas/FolderAccessList" }
                        ]
                    },
                    "update": {
                        "title": "Limit folder update",
                        "allOf": [
                            { "$ref": "#/components/schemas/FolderAccessList" }
                        ]
                    },
                    "delete": {
                        "title": "Limit folder delete",
                        "allOf": [
                            { "$ref": "#/components/schemas/FolderAccessList" }
                        ]
                    },
                    "attrib_read": {
                        "title": "Limit attribute read access",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AttributeAccessList"
                            }
                        ]
                    },
                    "attrib_write": {
                        "title": "Limit attribute write access",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AttributeAccessList"
                            }
                        ]
                    },
                    "endpoints": {
                        "title": "Limit REST endpoints",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EndpointsAccessList"
                            }
                        ]
                    }
                }
            },
            "ProjectModel": {
                "title": "ProjectModel",
                "required": ["name", "code"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Project name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "Name is an unique id of the {entity_name}",
                        "example": "awesome_project"
                    },
                    "code": {
                        "title": "Project code",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "prj"
                    },
                    "library": {
                        "title": "Library",
                        "type": "boolean",
                        "default": false
                    },
                    "folderTypes": {
                        "title": "Folder types",
                        "type": "array",
                        "items": {},
                        "example": [
                            { "name": "Folder", "icon": "folder" },
                            { "name": "Asset", "icon": "folder" },
                            { "name": "Shot", "icon": "folder" }
                        ]
                    },
                    "taskTypes": {
                        "title": "Task types",
                        "type": "array",
                        "items": {},
                        "example": [
                            { "name": "Rigging", "icon": "rig" },
                            { "name": "Modeling", "icon": "model" }
                        ]
                    },
                    "statuses": {
                        "title": "Statuses",
                        "type": "array",
                        "items": {},
                        "example": [{ "name": "Unknown" }]
                    },
                    "tags": {
                        "title": "Tags",
                        "type": "array",
                        "items": {},
                        "description": "List of tags available to set on entities.",
                        "example": [{ "name": "Unknown" }]
                    },
                    "config": {
                        "title": "Project config",
                        "type": "object",
                        "default": {}
                    },
                    "attrib": {
                        "title": "Project attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/pydantic__main__ProjectAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Project auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Project active",
                        "type": "boolean",
                        "description": "Whether the project is active",
                        "default": true
                    },
                    "ownAttrib": {
                        "title": "Own attributes",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["frameStart", "frameEnd"]
                    },
                    "createdAt": {
                        "title": "Created at",
                        "type": "string",
                        "description": "Time of creation",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    },
                    "updatedAt": {
                        "title": "Updated at",
                        "type": "string",
                        "description": "Time of last update",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    }
                }
            },
            "ProjectPatchModel": {
                "title": "ProjectPatchModel",
                "type": "object",
                "properties": {
                    "code": {
                        "title": "Project code",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "prj"
                    },
                    "library": {
                        "title": "Library",
                        "type": "boolean",
                        "default": false
                    },
                    "folderTypes": {
                        "title": "Folder types",
                        "type": "array",
                        "items": {},
                        "example": [
                            { "name": "Folder", "icon": "folder" },
                            { "name": "Asset", "icon": "folder" },
                            { "name": "Shot", "icon": "folder" }
                        ]
                    },
                    "taskTypes": {
                        "title": "Task types",
                        "type": "array",
                        "items": {},
                        "example": [
                            { "name": "Rigging", "icon": "rig" },
                            { "name": "Modeling", "icon": "model" }
                        ]
                    },
                    "statuses": {
                        "title": "Statuses",
                        "type": "array",
                        "items": {},
                        "example": [{ "name": "Unknown" }]
                    },
                    "tags": {
                        "title": "Tags",
                        "type": "array",
                        "items": {},
                        "description": "List of tags available to set on entities.",
                        "example": [{ "name": "Unknown" }]
                    },
                    "config": {
                        "title": "Project config",
                        "type": "object",
                        "default": {}
                    },
                    "attrib": {
                        "title": "Project attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/pydantic__main__ProjectAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Project auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Project active",
                        "type": "boolean",
                        "description": "Whether the project is active",
                        "default": true
                    }
                }
            },
            "ProjectPostModel": {
                "title": "ProjectPostModel",
                "required": ["code"],
                "type": "object",
                "properties": {
                    "code": {
                        "title": "Project code",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "prj"
                    },
                    "library": {
                        "title": "Library",
                        "type": "boolean",
                        "default": false
                    },
                    "folderTypes": {
                        "title": "Folder types",
                        "type": "array",
                        "items": {},
                        "example": [
                            { "name": "Folder", "icon": "folder" },
                            { "name": "Asset", "icon": "folder" },
                            { "name": "Shot", "icon": "folder" }
                        ]
                    },
                    "taskTypes": {
                        "title": "Task types",
                        "type": "array",
                        "items": {},
                        "example": [
                            { "name": "Rigging", "icon": "rig" },
                            { "name": "Modeling", "icon": "model" }
                        ]
                    },
                    "statuses": {
                        "title": "Statuses",
                        "type": "array",
                        "items": {},
                        "example": [{ "name": "Unknown" }]
                    },
                    "tags": {
                        "title": "Tags",
                        "type": "array",
                        "items": {},
                        "description": "List of tags available to set on entities.",
                        "example": [{ "name": "Unknown" }]
                    },
                    "config": {
                        "title": "Project config",
                        "type": "object",
                        "default": {}
                    },
                    "attrib": {
                        "title": "Project attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/pydantic__main__ProjectAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Project auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Project active",
                        "type": "boolean",
                        "description": "Whether the project is active",
                        "default": true
                    }
                }
            },
            "PublishTemplate": {
                "title": "PublishTemplate",
                "required": ["name", "directory", "file"],
                "type": "object",
                "properties": {
                    "name": { "title": "Template name", "type": "string" },
                    "directory": {
                        "title": "Directory template",
                        "type": "string"
                    },
                    "file": { "title": "File name template", "type": "string" }
                }
            },
            "RepresentationAttribModel": {
                "title": "RepresentationAttribModel",
                "type": "object",
                "properties": {
                    "resolutionWidth": {
                        "title": "Width",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Horizontal resolution",
                        "example": 1920
                    },
                    "resolutionHeight": {
                        "title": "Height",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Vertical resolution",
                        "example": 1080
                    },
                    "pixelAspect": {
                        "title": "Pixel aspect",
                        "type": "number",
                        "example": 1.0
                    },
                    "clipIn": {
                        "title": "Clip In",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Textual description of the entity",
                        "example": "A very nice entity"
                    },
                    "clipOut": {
                        "title": "Clip Out",
                        "type": "integer",
                        "example": 1
                    },
                    "frameStart": {
                        "title": "Start frame",
                        "type": "integer",
                        "example": 1001
                    },
                    "frameEnd": { "title": "End frame", "type": "integer" },
                    "handleStart": {
                        "title": "Handle start",
                        "type": "integer"
                    },
                    "handleEnd": { "title": "Handle end", "type": "integer" },
                    "path": { "title": "Path", "type": "string" },
                    "template": { "title": "Template", "type": "string" },
                    "fps": {
                        "title": "FPS",
                        "type": "number",
                        "description": "Frame rate",
                        "example": 25
                    },
                    "extension": { "title": "File extension", "type": "string" }
                }
            },
            "RepresentationFile": {
                "title": "RepresentationFile",
                "required": ["id", "path"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "File ID",
                        "type": "string",
                        "description": "Unique (within the representation) ID of the file",
                        "example": "7da4cba0f3e0b3c0aeac10d5bc73dcab"
                    },
                    "name": {
                        "title": "File name",
                        "type": "string",
                        "description": "File name"
                    },
                    "path": {
                        "title": "File path",
                        "type": "string",
                        "description": "Path to the file",
                        "example": "{root}/demo_Commercial/shots/sh010/workfile/workfileCompositing/v001/sh010_workfile Compositing_v001.ma"
                    },
                    "size": {
                        "title": "File size",
                        "type": "integer",
                        "description": "Size of the file in bytes",
                        "default": 0,
                        "example": "123456"
                    },
                    "hash": {
                        "title": "Hash of the file",
                        "type": "string",
                        "example": "e831c13f0ba0fbbfe102cd50420439d1"
                    },
                    "hash_type": {
                        "title": "Hash type. 'op3' is the default for AYON 3 imports",
                        "enum": ["md5", "sha1", "sha256", "op3"],
                        "type": "string",
                        "default": "md5",
                        "example": "md5"
                    }
                }
            },
            "RepresentationModel": {
                "title": "RepresentationModel",
                "required": ["name", "versionId"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Representation ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Unique identifier of the {entity_name}",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "name": {
                        "title": "Name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "The name of the representation",
                        "example": "ma"
                    },
                    "versionId": {
                        "title": "Version ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent version",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "files": {
                        "title": "Files",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RepresentationFile"
                        },
                        "description": "List of files"
                    },
                    "attrib": {
                        "title": "Representation attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RepresentationAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Representation auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Representation active",
                        "type": "boolean",
                        "description": "Whether the representation is active",
                        "default": true
                    },
                    "ownAttrib": {
                        "title": "Own attributes",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["frameStart", "frameEnd"]
                    },
                    "status": {
                        "title": "Representation status",
                        "type": "string",
                        "description": "Status of the representation",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Representation tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the representation",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "createdAt": {
                        "title": "Created at",
                        "type": "string",
                        "description": "Time of creation",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    },
                    "updatedAt": {
                        "title": "Updated at",
                        "type": "string",
                        "description": "Time of last update",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    }
                }
            },
            "RepresentationPatchModel": {
                "title": "RepresentationPatchModel",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "The name of the representation",
                        "example": "ma"
                    },
                    "versionId": {
                        "title": "Version ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent version",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "files": {
                        "title": "Files",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RepresentationFile"
                        },
                        "description": "List of files"
                    },
                    "status": {
                        "title": "Representation status",
                        "type": "string",
                        "description": "Status of the representation",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Representation tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the representation",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Representation attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RepresentationAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Representation auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Representation active",
                        "type": "boolean",
                        "description": "Whether the representation is active",
                        "default": true
                    }
                }
            },
            "RepresentationPostModel": {
                "title": "RepresentationPostModel",
                "required": ["name", "versionId"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "The name of the representation",
                        "example": "ma"
                    },
                    "versionId": {
                        "title": "Version ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent version",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "files": {
                        "title": "Files",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RepresentationFile"
                        },
                        "description": "List of files"
                    },
                    "status": {
                        "title": "Representation status",
                        "type": "string",
                        "description": "Status of the representation",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Representation tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the representation",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Representation attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RepresentationAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Representation auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Representation active",
                        "type": "boolean",
                        "description": "Whether the representation is active",
                        "default": true
                    }
                }
            },
            "ResolveRequestModel": {
                "title": "ResolveRequestModel",
                "required": ["uris"],
                "type": "object",
                "properties": {
                    "uris": {
                        "title": "Uris",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "list of uris to resolve"
                    }
                },
                "description": "Base API model."
            },
            "RolesOnProject": {
                "title": "RolesOnProject",
                "required": ["project", "roles"],
                "type": "object",
                "properties": {
                    "project": {
                        "title": "Project",
                        "type": "string",
                        "description": "Project name"
                    },
                    "roles": {
                        "title": "Roles",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "List of user roles on the project"
                    }
                },
                "description": "Base API model."
            },
            "Root": {
                "title": "Root",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Root name",
                        "pattern": "^[a-zA-Z0-9_]{1,}$",
                        "type": "string"
                    },
                    "windows": {
                        "title": "Windows",
                        "type": "string",
                        "default": ""
                    },
                    "linux": {
                        "title": "Linux",
                        "type": "string",
                        "default": ""
                    },
                    "darwin": {
                        "title": "Darwin",
                        "type": "string",
                        "default": ""
                    }
                },
                "description": "Setup root paths"
            },
            "ServerSourceInfo": {
                "title": "ServerSourceInfo",
                "type": "object",
                "properties": {
                    "type": {
                        "title": "Type",
                        "enum": ["server"],
                        "type": "string",
                        "default": "server"
                    },
                    "filename": { "title": "Filename", "type": "string" },
                    "path": { "title": "Path", "type": "string" }
                },
                "description": "Base API model."
            },
            "ServiceDataModel": {
                "title": "ServiceDataModel",
                "type": "object",
                "properties": {
                    "image": {
                        "title": "Image",
                        "type": "string",
                        "example": "ayon/ftrack-addon-leecher:2.0.0"
                    },
                    "env": { "title": "Env", "type": "object" }
                },
                "description": "Base API model."
            },
            "ServiceListModel": {
                "title": "ServiceListModel",
                "type": "object",
                "properties": {
                    "services": {
                        "title": "Services",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/ServiceModel" }
                    }
                },
                "description": "Base API model."
            },
            "ServiceModel": {
                "title": "ServiceModel",
                "required": [
                    "name",
                    "hostname",
                    "addonName",
                    "addonVersion",
                    "service",
                    "shouldRun",
                    "isRunning"
                ],
                "type": "object",
                "properties": {
                    "name": { "title": "Name", "type": "string" },
                    "hostname": {
                        "title": "Hostname",
                        "type": "string",
                        "example": "worker03"
                    },
                    "addonName": {
                        "title": "Addonname",
                        "type": "string",
                        "example": "ftrack"
                    },
                    "addonVersion": {
                        "title": "Addonversion",
                        "type": "string",
                        "example": "2.0.0"
                    },
                    "service": {
                        "title": "Service",
                        "type": "string",
                        "example": "collector"
                    },
                    "shouldRun": { "title": "Shouldrun", "type": "boolean" },
                    "isRunning": { "title": "Isrunning", "type": "boolean" },
                    "lastSeen": {
                        "title": "Lastseen",
                        "type": "string",
                        "format": "date-time"
                    },
                    "data": { "$ref": "#/components/schemas/ServiceDataModel" }
                },
                "description": "Base API model."
            },
            "SessionModel": {
                "title": "SessionModel",
                "required": ["user", "token", "created", "lastUsed"],
                "type": "object",
                "properties": {
                    "user": { "$ref": "#/components/schemas/UserModel" },
                    "token": { "title": "Token", "type": "string" },
                    "created": { "title": "Created", "type": "number" },
                    "lastUsed": { "title": "Lastused", "type": "number" },
                    "isService": {
                        "title": "Isservice",
                        "type": "boolean",
                        "default": false
                    },
                    "clientInfo": { "$ref": "#/components/schemas/ClientInfo" }
                },
                "description": "Base API model."
            },
            "SetAttributeListModel": {
                "title": "SetAttributeListModel",
                "type": "object",
                "properties": {
                    "attributes": {
                        "title": "Attributes configuration",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeModel"
                        }
                    },
                    "deleteMissing": {
                        "title": "Delete missing",
                        "type": "boolean",
                        "description": "Delete custom attributes not includedin the payload from the database.",
                        "default": false
                    }
                },
                "description": "Base API model."
            },
            "SiteInfo": {
                "title": "SiteInfo",
                "required": ["id", "platform", "hostname", "version", "users"],
                "type": "object",
                "properties": {
                    "id": { "title": "Site identifier", "type": "string" },
                    "platform": {
                        "title": "Platform",
                        "enum": ["linux", "windows", "darwin"],
                        "type": "string"
                    },
                    "hostname": {
                        "title": "Machine hostname",
                        "type": "string"
                    },
                    "version": { "title": "AYON version", "type": "string" },
                    "users": {
                        "title": "List of users",
                        "type": "array",
                        "items": { "type": "string" }
                    }
                },
                "description": "Base API model."
            },
            "SpawnServiceRequestModel": {
                "title": "SpawnServiceRequestModel",
                "required": [
                    "addonName",
                    "addonVersion",
                    "service",
                    "hostname"
                ],
                "type": "object",
                "properties": {
                    "addonName": { "title": "Addonname", "type": "string" },
                    "addonVersion": {
                        "title": "Addonversion",
                        "type": "string"
                    },
                    "service": { "title": "Service", "type": "string" },
                    "hostname": { "title": "Hostname", "type": "string" }
                },
                "description": "Base API model."
            },
            "Status": {
                "title": "Status",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string"
                    },
                    "shortName": {
                        "title": "Short name",
                        "type": "string",
                        "default": ""
                    },
                    "state": {
                        "title": "State",
                        "enum": [
                            "not_started",
                            "in_progress",
                            "done",
                            "blocked"
                        ],
                        "type": "string",
                        "default": "not_started",
                        "enum_resolver": {}
                    },
                    "icon": {
                        "title": "Icon",
                        "type": "string",
                        "default": "",
                        "widget": "icon"
                    },
                    "color": {
                        "title": "Color",
                        "type": "string",
                        "default": "#cacaca",
                        "widget": "color"
                    },
                    "original_name": {
                        "title": "Original Name",
                        "type": "string",
                        "scope": []
                    }
                }
            },
            "SubsetAttribModel": {
                "title": "SubsetAttribModel",
                "type": "object",
                "properties": {
                    "subsetGroup": {
                        "title": "Subset group",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Textual description of the entity",
                        "example": "A very nice entity"
                    }
                }
            },
            "SubsetModel": {
                "title": "SubsetModel",
                "required": ["name", "folderId", "family"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Subset ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Unique identifier of the {entity_name}",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "name": {
                        "title": "Name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "Name of the subset",
                        "example": "modelMain"
                    },
                    "folderId": {
                        "title": "Folder ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent folder",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "family": {
                        "title": "Family",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "Subset family",
                        "example": "model"
                    },
                    "attrib": {
                        "title": "Subset attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/SubsetAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "Subset auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Subset active",
                        "type": "boolean",
                        "description": "Whether the subset is active",
                        "default": true
                    },
                    "ownAttrib": {
                        "title": "Own attributes",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["frameStart", "frameEnd"]
                    },
                    "status": {
                        "title": "Subset status",
                        "type": "string",
                        "description": "Status of the subset",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Subset tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the subset",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "createdAt": {
                        "title": "Created at",
                        "type": "string",
                        "description": "Time of creation",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    },
                    "updatedAt": {
                        "title": "Updated at",
                        "type": "string",
                        "description": "Time of last update",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    }
                }
            },
            "SubsetPatchModel": {
                "title": "SubsetPatchModel",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "Name of the subset",
                        "example": "modelMain"
                    },
                    "folderId": {
                        "title": "Folder ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent folder",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "family": {
                        "title": "Family",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "Subset family",
                        "example": "model"
                    },
                    "status": {
                        "title": "Subset status",
                        "type": "string",
                        "description": "Status of the subset",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Subset tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the subset",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Subset attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/SubsetAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "Subset auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Subset active",
                        "type": "boolean",
                        "description": "Whether the subset is active",
                        "default": true
                    }
                }
            },
            "SubsetPostModel": {
                "title": "SubsetPostModel",
                "required": ["name", "folderId", "family"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "Name of the subset",
                        "example": "modelMain"
                    },
                    "folderId": {
                        "title": "Folder ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent folder",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "family": {
                        "title": "Family",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "description": "Subset family",
                        "example": "model"
                    },
                    "status": {
                        "title": "Subset status",
                        "type": "string",
                        "description": "Status of the subset",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Subset tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the subset",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Subset attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/SubsetAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "Subset auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Subset active",
                        "type": "boolean",
                        "description": "Whether the subset is active",
                        "default": true
                    }
                }
            },
            "Tag": {
                "title": "Tag",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string"
                    },
                    "color": {
                        "title": "Color",
                        "type": "string",
                        "default": "#cacaca",
                        "widget": "color"
                    },
                    "original_name": {
                        "title": "Original Name",
                        "type": "string",
                        "scope": []
                    }
                }
            },
            "TaskAttribModel": {
                "title": "TaskAttribModel",
                "type": "object",
                "properties": {
                    "resolutionWidth": {
                        "title": "Width",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Horizontal resolution",
                        "example": 1920
                    },
                    "resolutionHeight": {
                        "title": "Height",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Vertical resolution",
                        "example": 1080
                    },
                    "pixelAspect": {
                        "title": "Pixel aspect",
                        "type": "number",
                        "example": 1.0
                    },
                    "clipIn": {
                        "title": "Clip In",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Textual description of the entity",
                        "example": "A very nice entity"
                    },
                    "clipOut": {
                        "title": "Clip Out",
                        "type": "integer",
                        "example": 1
                    },
                    "frameStart": {
                        "title": "Start frame",
                        "type": "integer",
                        "example": 1001
                    },
                    "frameEnd": { "title": "End frame", "type": "integer" },
                    "handleStart": {
                        "title": "Handle start",
                        "type": "integer"
                    },
                    "handleEnd": { "title": "Handle end", "type": "integer" },
                    "fps": {
                        "title": "FPS",
                        "type": "number",
                        "description": "Frame rate",
                        "example": 25
                    },
                    "startDate": {
                        "title": "Start date",
                        "type": "string",
                        "description": "Date and time when the project or task or asset was started",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    },
                    "endDate": {
                        "title": "End date",
                        "type": "string",
                        "description": "Deadline date and time",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    }
                }
            },
            "TaskModel": {
                "title": "TaskModel",
                "required": ["name", "taskType"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Task ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Unique identifier of the {entity_name}",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "name": {
                        "title": "Folder ID",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "modeling"
                    },
                    "label": {
                        "title": "Task label",
                        "pattern": "^[^';]*$",
                        "type": "string",
                        "example": "Modeling of a model"
                    },
                    "taskType": {
                        "title": "Task type",
                        "type": "string",
                        "example": "Modeling"
                    },
                    "assignees": {
                        "title": "Assignees",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "List of users assigned to the task",
                        "example": ["john_doe", "jane_doe"]
                    },
                    "folderId": {
                        "title": "Folder ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Folder ID",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "attrib": {
                        "title": "Task attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/TaskAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "Task auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Task active",
                        "type": "boolean",
                        "description": "Whether the task is active",
                        "default": true
                    },
                    "ownAttrib": {
                        "title": "Own attributes",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["frameStart", "frameEnd"]
                    },
                    "status": {
                        "title": "Task status",
                        "type": "string",
                        "description": "Status of the task",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Task tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the task",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "createdAt": {
                        "title": "Created at",
                        "type": "string",
                        "description": "Time of creation",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    },
                    "updatedAt": {
                        "title": "Updated at",
                        "type": "string",
                        "description": "Time of last update",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    }
                }
            },
            "TaskPatchModel": {
                "title": "TaskPatchModel",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Folder ID",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "modeling"
                    },
                    "label": {
                        "title": "Task label",
                        "pattern": "^[^';]*$",
                        "type": "string",
                        "example": "Modeling of a model"
                    },
                    "taskType": {
                        "title": "Task type",
                        "type": "string",
                        "example": "Modeling"
                    },
                    "assignees": {
                        "title": "Assignees",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "List of users assigned to the task",
                        "example": ["john_doe", "jane_doe"]
                    },
                    "folderId": {
                        "title": "Folder ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Folder ID",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "status": {
                        "title": "Task status",
                        "type": "string",
                        "description": "Status of the task",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Task tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the task",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Task attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/TaskAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "Task auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Task active",
                        "type": "boolean",
                        "description": "Whether the task is active",
                        "default": true
                    }
                }
            },
            "TaskPostModel": {
                "title": "TaskPostModel",
                "required": ["name", "taskType"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Folder ID",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "modeling"
                    },
                    "label": {
                        "title": "Task label",
                        "pattern": "^[^';]*$",
                        "type": "string",
                        "example": "Modeling of a model"
                    },
                    "taskType": {
                        "title": "Task type",
                        "type": "string",
                        "example": "Modeling"
                    },
                    "assignees": {
                        "title": "Assignees",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "List of users assigned to the task",
                        "example": ["john_doe", "jane_doe"]
                    },
                    "folderId": {
                        "title": "Folder ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Folder ID",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "status": {
                        "title": "Task status",
                        "type": "string",
                        "description": "Status of the task",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Task tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the task",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Task attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/TaskAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "Task auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Task active",
                        "type": "boolean",
                        "description": "Whether the task is active",
                        "default": true
                    }
                }
            },
            "TaskType": {
                "title": "TaskType",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string"
                    },
                    "shortName": {
                        "title": "Short name",
                        "type": "string",
                        "default": ""
                    },
                    "icon": {
                        "title": "Icon",
                        "type": "string",
                        "default": "",
                        "widget": "icon"
                    },
                    "original_name": {
                        "title": "Original name",
                        "type": "string",
                        "scope": []
                    }
                }
            },
            "TeamListItemModel": {
                "title": "TeamListItemModel",
                "required": ["name", "memberCount"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Team name"
                    },
                    "memberCount": {
                        "title": "Membercount",
                        "type": "integer",
                        "description": "Number of members in the team"
                    },
                    "leaders": {
                        "title": "Leaders",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TeamMemberModel"
                        },
                        "description": "Team leaders"
                    }
                },
                "description": "Base API model."
            },
            "TeamMemberModel": {
                "title": "TeamMemberModel",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": { "title": "User's name", "type": "string" },
                    "leader": {
                        "title": "Is user a leader",
                        "type": "boolean",
                        "default": false
                    },
                    "roles": {
                        "title": "User's role",
                        "type": "array",
                        "items": { "type": "string" }
                    }
                },
                "description": "Base API model."
            },
            "TeamPutModel": {
                "title": "TeamPutModel",
                "required": ["members"],
                "type": "object",
                "properties": {
                    "members": {
                        "title": "Team members",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TeamMemberModel"
                        }
                    }
                },
                "description": "Base API model."
            },
            "Templates": {
                "title": "Templates",
                "type": "object",
                "properties": {
                    "version_padding": {
                        "title": "Version padding",
                        "exclusiveMinimum": 0.0,
                        "type": "integer",
                        "default": 3
                    },
                    "version": {
                        "title": "Version template",
                        "type": "string",
                        "default": "v{version:0>{@version_padding}}"
                    },
                    "frame_padding": {
                        "title": "Frame padding",
                        "exclusiveMinimum": 0.0,
                        "type": "integer",
                        "default": 4
                    },
                    "frame": {
                        "title": "Frame template",
                        "type": "string",
                        "default": "{frame:0>{@frame_padding}}"
                    },
                    "work": {
                        "title": "Work",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/WorkTemplate" }
                    },
                    "publish": {
                        "title": "Publish",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublishTemplate"
                        }
                    },
                    "hero": {
                        "title": "Hero",
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/HeroTemplate" }
                    },
                    "delivery": {
                        "title": "Delivery",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeliveryTemplate"
                        }
                    },
                    "others": {
                        "title": "Others",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomTemplate"
                        }
                    }
                }
            },
            "UpdateEventRequestModel": {
                "title": "UpdateEventRequestModel",
                "type": "object",
                "properties": {
                    "sender": { "title": "Sender", "type": "string" },
                    "projectName": {
                        "title": "Project name",
                        "type": "string",
                        "description": "Deprecated use 'project' instead"
                    },
                    "project": { "title": "Project name", "type": "string" },
                    "status": { "title": "Status", "type": "string" },
                    "description": { "title": "Description", "type": "string" },
                    "summary": { "title": "Summary", "type": "object" },
                    "payload": { "title": "Payload", "type": "object" }
                },
                "description": "Base API model."
            },
            "UserAttribModel": {
                "title": "UserAttribModel",
                "type": "object",
                "properties": {
                    "fullName": {
                        "title": "Full name",
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "email": {
                        "title": "E-Mail",
                        "type": "string",
                        "example": "jane.doe@ayon.cloud"
                    },
                    "avatarUrl": { "title": "Avatar URL", "type": "string" }
                }
            },
            "UserModel": {
                "title": "UserModel",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "User name",
                        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9]$",
                        "type": "string",
                        "description": "Name is an unique id of the {entity_name}",
                        "example": "awesome_user"
                    },
                    "attrib": {
                        "title": "User attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/UserAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "User auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "User active",
                        "type": "boolean",
                        "description": "Whether the user is active",
                        "default": true
                    },
                    "ownAttrib": {
                        "title": "Own attributes",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["frameStart", "frameEnd"]
                    },
                    "createdAt": {
                        "title": "Created at",
                        "type": "string",
                        "description": "Time of creation",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    },
                    "updatedAt": {
                        "title": "Updated at",
                        "type": "string",
                        "description": "Time of last update",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    }
                }
            },
            "UserPatchModel": {
                "title": "UserPatchModel",
                "type": "object",
                "properties": {
                    "attrib": {
                        "title": "User attributes",
                        "allOf": [
                            { "$ref": "#/components/schemas/UserAttribModel" }
                        ]
                    },
                    "data": {
                        "title": "User auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "User active",
                        "type": "boolean",
                        "description": "Whether the user is active",
                        "default": true
                    }
                }
            },
            "UserSessionModel": {
                "title": "UserSessionModel",
                "required": ["token", "isService", "lastUsed"],
                "type": "object",
                "properties": {
                    "token": { "title": "Token", "type": "string" },
                    "isService": { "title": "Isservice", "type": "boolean" },
                    "lastUsed": { "title": "Lastused", "type": "integer" },
                    "clientInfo": { "$ref": "#/components/schemas/ClientInfo" }
                },
                "description": "Base API model."
            },
            "UserSessionsResponseModel": {
                "title": "UserSessionsResponseModel",
                "required": ["sessions"],
                "type": "object",
                "properties": {
                    "sessions": {
                        "title": "Sessions",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserSessionModel"
                        }
                    }
                },
                "description": "Base API model."
            },
            "UsersResponseModel": {
                "title": "UsersResponseModel",
                "required": ["roles"],
                "type": "object",
                "properties": {
                    "teamSizeActive": {
                        "title": "Teamsizeactive",
                        "type": "integer",
                        "description": "Number of active team members",
                        "default": 0
                    },
                    "teamSizeTotal": {
                        "title": "Teamsizetotal",
                        "type": "integer",
                        "description": "Total number of team members",
                        "default": 0
                    },
                    "usersWithAccessActive": {
                        "title": "Userswithaccessactive",
                        "type": "integer",
                        "description": "Number of active users",
                        "default": 0
                    },
                    "usersWithAccessTotal": {
                        "title": "Userswithaccesstotal",
                        "type": "integer",
                        "description": "Total number of users",
                        "default": 0
                    },
                    "roles": {
                        "title": "Roles",
                        "type": "object",
                        "additionalProperties": { "type": "integer" },
                        "description": "Number of users per role",
                        "example": { "artist": 1, "viewer": 2 }
                    }
                },
                "description": "Base API model."
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": ["loc", "msg", "type"],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "anyOf": [
                                { "type": "string" },
                                { "type": "integer" }
                            ]
                        }
                    },
                    "msg": { "title": "Message", "type": "string" },
                    "type": { "title": "Error Type", "type": "string" }
                }
            },
            "VariantCopyRequest": {
                "title": "VariantCopyRequest",
                "required": ["addonName", "copyFrom", "copyTo"],
                "type": "object",
                "properties": {
                    "addonName": {
                        "title": "Addonname",
                        "type": "string",
                        "description": "Addon name"
                    },
                    "copyFrom": {
                        "title": "Copyfrom",
                        "enum": ["production", "staging"],
                        "type": "string",
                        "description": "Source variant",
                        "example": "production"
                    },
                    "copyTo": {
                        "title": "Copyto",
                        "enum": ["production", "staging"],
                        "type": "string",
                        "description": "Destination variant",
                        "example": "staging"
                    }
                },
                "description": "Base API model."
            },
            "VersionAttribModel": {
                "title": "VersionAttribModel",
                "type": "object",
                "properties": {
                    "resolutionWidth": {
                        "title": "Width",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Horizontal resolution",
                        "example": 1920
                    },
                    "resolutionHeight": {
                        "title": "Height",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Vertical resolution",
                        "example": 1080
                    },
                    "pixelAspect": {
                        "title": "Pixel aspect",
                        "type": "number",
                        "example": 1.0
                    },
                    "clipIn": {
                        "title": "Clip In",
                        "type": "integer",
                        "example": 1
                    },
                    "intent": { "title": "Intent", "type": "string" },
                    "machine": { "title": "Machine", "type": "string" },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Textual description of the entity",
                        "example": "A very nice entity"
                    },
                    "clipOut": {
                        "title": "Clip Out",
                        "type": "integer",
                        "example": 1
                    },
                    "frameStart": {
                        "title": "Start frame",
                        "type": "integer",
                        "example": 1001
                    },
                    "frameEnd": { "title": "End frame", "type": "integer" },
                    "handleStart": {
                        "title": "Handle start",
                        "type": "integer"
                    },
                    "source": { "title": "Source", "type": "string" },
                    "comment": { "title": "Comment", "type": "string" },
                    "site": {
                        "title": "Site",
                        "type": "string",
                        "example": "workstation42"
                    },
                    "handleEnd": { "title": "Handle end", "type": "integer" },
                    "families": {
                        "title": "Families",
                        "type": "array",
                        "items": { "type": "string" }
                    },
                    "colorSpace": {
                        "title": "Color space",
                        "type": "string",
                        "example": "rec709"
                    },
                    "fps": {
                        "title": "FPS",
                        "type": "number",
                        "description": "Frame rate",
                        "example": 25
                    }
                }
            },
            "VersionInfo": {
                "title": "VersionInfo",
                "type": "object",
                "properties": {
                    "hasSettings": {
                        "title": "Hassettings",
                        "type": "boolean",
                        "default": false
                    },
                    "hasSiteSettings": {
                        "title": "Hassitesettings",
                        "type": "boolean",
                        "default": false
                    },
                    "frontendScopes": {
                        "title": "Frontendscopes",
                        "type": "object"
                    },
                    "clientPyproject": {
                        "title": "Clientpyproject",
                        "type": "object"
                    },
                    "clientSourceInfo": {
                        "title": "Clientsourceinfo",
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/FilesystemSourceInfo"
                                },
                                {
                                    "$ref": "#/components/schemas/ServerSourceInfo"
                                },
                                {
                                    "$ref": "#/components/schemas/HttpSourceInfo"
                                }
                            ]
                        }
                    },
                    "services": { "title": "Services", "type": "object" }
                },
                "description": "Base API model."
            },
            "VersionModel": {
                "title": "VersionModel",
                "required": ["version", "subsetId"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Version ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Unique identifier of the {entity_name}",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "version": {
                        "title": "Version",
                        "type": "integer",
                        "description": "Version number",
                        "example": 1
                    },
                    "subsetId": {
                        "title": "Subset ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent subset",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "taskId": {
                        "title": "Task ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "thumbnailId": {
                        "title": "Thumbnail ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "author": {
                        "title": "Author",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "john_doe"
                    },
                    "attrib": {
                        "title": "Version attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/VersionAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Version auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Version active",
                        "type": "boolean",
                        "description": "Whether the version is active",
                        "default": true
                    },
                    "ownAttrib": {
                        "title": "Own attributes",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["frameStart", "frameEnd"]
                    },
                    "status": {
                        "title": "Version status",
                        "type": "string",
                        "description": "Status of the version",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Version tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the version",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "createdAt": {
                        "title": "Created at",
                        "type": "string",
                        "description": "Time of creation",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    },
                    "updatedAt": {
                        "title": "Updated at",
                        "type": "string",
                        "description": "Time of last update",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    }
                }
            },
            "VersionPatchModel": {
                "title": "VersionPatchModel",
                "type": "object",
                "properties": {
                    "version": {
                        "title": "Version",
                        "type": "integer",
                        "description": "Version number",
                        "example": 1
                    },
                    "subsetId": {
                        "title": "Subset ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent subset",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "taskId": {
                        "title": "Task ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "thumbnailId": {
                        "title": "Thumbnail ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "author": {
                        "title": "Author",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "john_doe"
                    },
                    "status": {
                        "title": "Version status",
                        "type": "string",
                        "description": "Status of the version",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Version tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the version",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Version attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/VersionAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Version auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Version active",
                        "type": "boolean",
                        "description": "Whether the version is active",
                        "default": true
                    }
                }
            },
            "VersionPostModel": {
                "title": "VersionPostModel",
                "required": ["version", "subsetId"],
                "type": "object",
                "properties": {
                    "version": {
                        "title": "Version",
                        "type": "integer",
                        "description": "Version number",
                        "example": 1
                    },
                    "subsetId": {
                        "title": "Subset ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent subset",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "taskId": {
                        "title": "Task ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "thumbnailId": {
                        "title": "Thumbnail ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "author": {
                        "title": "Author",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "john_doe"
                    },
                    "status": {
                        "title": "Version status",
                        "type": "string",
                        "description": "Status of the version",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Version tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the version",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Version attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/VersionAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Version auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Version active",
                        "type": "boolean",
                        "description": "Whether the version is active",
                        "default": true
                    }
                }
            },
            "WorkTemplate": {
                "title": "WorkTemplate",
                "required": ["name", "directory", "file"],
                "type": "object",
                "properties": {
                    "name": { "title": "Template name", "type": "string" },
                    "directory": {
                        "title": "Directory template",
                        "type": "string"
                    },
                    "file": { "title": "File name template", "type": "string" }
                }
            },
            "WorkfileAttribModel": {
                "title": "WorkfileAttribModel",
                "type": "object",
                "properties": {
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Textual description of the entity",
                        "example": "A very nice entity"
                    },
                    "extension": { "title": "File extension", "type": "string" }
                }
            },
            "WorkfileModel": {
                "title": "WorkfileModel",
                "required": ["path", "taskId"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Workfile ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "Unique identifier of the {entity_name}",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "path": {
                        "title": "Path",
                        "type": "string",
                        "description": "Path to the workfile",
                        "example": "{root['work']}/Project/workfiles/ma/modelMain_v001.ma"
                    },
                    "taskId": {
                        "title": "Task ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent task",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "thumbnailId": {
                        "title": "Thumbnail ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "createdBy": {
                        "title": "Createdby",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "john_doe"
                    },
                    "updatedBy": {
                        "title": "Updatedby",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "john_doe"
                    },
                    "attrib": {
                        "title": "Workfile attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WorkfileAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Workfile auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Workfile active",
                        "type": "boolean",
                        "description": "Whether the workfile is active",
                        "default": true
                    },
                    "ownAttrib": {
                        "title": "Own attributes",
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["frameStart", "frameEnd"]
                    },
                    "status": {
                        "title": "Workfile status",
                        "type": "string",
                        "description": "Status of the workfile",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Workfile tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the workfile",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "createdAt": {
                        "title": "Created at",
                        "type": "string",
                        "description": "Time of creation",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    },
                    "updatedAt": {
                        "title": "Updated at",
                        "type": "string",
                        "description": "Time of last update",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00+00:00"
                    }
                }
            },
            "WorkfilePatchModel": {
                "title": "WorkfilePatchModel",
                "type": "object",
                "properties": {
                    "path": {
                        "title": "Path",
                        "type": "string",
                        "description": "Path to the workfile",
                        "example": "{root['work']}/Project/workfiles/ma/modelMain_v001.ma"
                    },
                    "taskId": {
                        "title": "Task ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent task",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "thumbnailId": {
                        "title": "Thumbnail ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "createdBy": {
                        "title": "Createdby",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "john_doe"
                    },
                    "updatedBy": {
                        "title": "Updatedby",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "john_doe"
                    },
                    "status": {
                        "title": "Workfile status",
                        "type": "string",
                        "description": "Status of the workfile",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Workfile tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the workfile",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Workfile attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WorkfileAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Workfile auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Workfile active",
                        "type": "boolean",
                        "description": "Whether the workfile is active",
                        "default": true
                    }
                }
            },
            "WorkfilePostModel": {
                "title": "WorkfilePostModel",
                "required": ["path", "taskId"],
                "type": "object",
                "properties": {
                    "path": {
                        "title": "Path",
                        "type": "string",
                        "description": "Path to the workfile",
                        "example": "{root['work']}/Project/workfiles/ma/modelMain_v001.ma"
                    },
                    "taskId": {
                        "title": "Task ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "description": "ID of the parent task",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "thumbnailId": {
                        "title": "Thumbnail ID",
                        "pattern": "^[0-f]{32}$",
                        "type": "string",
                        "example": "c10d5bc73dcab7da4cba0f3e0b3c0aea"
                    },
                    "createdBy": {
                        "title": "Createdby",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "john_doe"
                    },
                    "updatedBy": {
                        "title": "Updatedby",
                        "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*[a-zA-Z0-9_]$",
                        "type": "string",
                        "example": "john_doe"
                    },
                    "status": {
                        "title": "Workfile status",
                        "type": "string",
                        "description": "Status of the workfile",
                        "example": "In progress"
                    },
                    "tags": {
                        "title": "Workfile tags",
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Tags assigned to the the workfile",
                        "example": ["flabadob", "blip", "blop", "blup"]
                    },
                    "attrib": {
                        "title": "Workfile attributes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WorkfileAttribModel"
                            }
                        ]
                    },
                    "data": {
                        "title": "Workfile auxiliary data",
                        "type": "object"
                    },
                    "active": {
                        "title": "Workfile active",
                        "type": "boolean",
                        "description": "Whether the workfile is active",
                        "default": true
                    }
                }
            },
            "auth__auth__LoginResponseModel": {
                "title": "LoginResponseModel",
                "required": ["detail", "token", "user"],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Response detail",
                        "type": "string",
                        "description": "Text description, which may be displayed to the user",
                        "example": "Logged in as USERNAME"
                    },
                    "token": {
                        "title": "Access token",
                        "type": "string",
                        "example": "ACCESS_TOKEN"
                    },
                    "user": { "$ref": "#/components/schemas/UserModel" }
                },
                "description": "Base API model."
            },
            "ayon_server__settings__anatomy__ProjectAttribModel": {
                "title": "ProjectAttribModel",
                "type": "object",
                "properties": {
                    "resolutionWidth": {
                        "title": "Width",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Horizontal resolution",
                        "default": 1920,
                        "example": 1920
                    },
                    "resolutionHeight": {
                        "title": "Height",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Vertical resolution",
                        "default": 1080,
                        "example": 1080
                    },
                    "pixelAspect": {
                        "title": "Pixel aspect",
                        "type": "number",
                        "default": 1.0,
                        "example": 1.0
                    },
                    "clipIn": {
                        "title": "Clip In",
                        "type": "integer",
                        "default": 1,
                        "example": 1
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Textual description of the entity",
                        "example": "A very nice entity"
                    },
                    "clipOut": {
                        "title": "Clip Out",
                        "type": "integer",
                        "default": 1,
                        "example": 1
                    },
                    "frameStart": {
                        "title": "Start frame",
                        "type": "integer",
                        "default": 1001,
                        "example": 1001
                    },
                    "frameEnd": {
                        "title": "End frame",
                        "type": "integer",
                        "default": 1001
                    },
                    "handleStart": {
                        "title": "Handle start",
                        "type": "integer",
                        "default": 0
                    },
                    "handleEnd": {
                        "title": "Handle end",
                        "type": "integer",
                        "default": 0
                    },
                    "fps": {
                        "title": "FPS",
                        "type": "number",
                        "description": "Frame rate",
                        "default": 25,
                        "example": 25
                    },
                    "startDate": {
                        "title": "Start date",
                        "type": "string",
                        "description": "Date and time when the project or task or asset was started",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    },
                    "endDate": {
                        "title": "End date",
                        "type": "string",
                        "description": "Deadline date and time",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    }
                }
            },
            "oauth__LoginResponseModel": {
                "title": "LoginResponseModel",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "string",
                        "example": "Logged in as NAME"
                    },
                    "error": {
                        "title": "Error",
                        "type": "string",
                        "example": "Unauthorized"
                    },
                    "token": {
                        "title": "Access token",
                        "type": "string",
                        "example": "TOKEN"
                    },
                    "user": {
                        "title": "User data",
                        "allOf": [{ "$ref": "#/components/schemas/UserModel" }]
                    }
                },
                "description": "Base API model."
            },
            "pydantic__main__ProjectAttribModel": {
                "title": "ProjectAttribModel",
                "type": "object",
                "properties": {
                    "resolutionWidth": {
                        "title": "Width",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Horizontal resolution",
                        "default": 1920,
                        "example": 1920
                    },
                    "resolutionHeight": {
                        "title": "Height",
                        "exclusiveMaximum": 50000.0,
                        "type": "integer",
                        "description": "Vertical resolution",
                        "default": 1080,
                        "example": 1080
                    },
                    "pixelAspect": {
                        "title": "Pixel aspect",
                        "type": "number",
                        "default": 1.0,
                        "example": 1.0
                    },
                    "clipIn": {
                        "title": "Clip In",
                        "type": "integer",
                        "default": 1,
                        "example": 1
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Textual description of the entity",
                        "example": "A very nice entity"
                    },
                    "clipOut": {
                        "title": "Clip Out",
                        "type": "integer",
                        "default": 1,
                        "example": 1
                    },
                    "frameStart": {
                        "title": "Start frame",
                        "type": "integer",
                        "default": 1001,
                        "example": 1001
                    },
                    "frameEnd": {
                        "title": "End frame",
                        "type": "integer",
                        "default": 1001
                    },
                    "handleStart": {
                        "title": "Handle start",
                        "type": "integer",
                        "default": 0
                    },
                    "handleEnd": {
                        "title": "Handle end",
                        "type": "integer",
                        "default": 0
                    },
                    "fps": {
                        "title": "FPS",
                        "type": "number",
                        "description": "Frame rate",
                        "default": 25,
                        "example": 25
                    },
                    "startDate": {
                        "title": "Start date",
                        "type": "string",
                        "description": "Date and time when the project or task or asset was started",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    },
                    "endDate": {
                        "title": "End date",
                        "type": "string",
                        "description": "Deadline date and time",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "\nAuthentication endpoints. Most of the endpoints require authentication.\nThis is done by passing `Authorization` header with `Bearer <token>` value.\n        "
        },
        {
            "name": "Projects",
            "description": "\nProject is a collection of folders and other entities.\nEach project has a unique name, which is used as its identifier.\n\nTo address an entity within the project, you need to provide\nboth the project name and the entity ID.\n        "
        },
        {
            "name": "Folders",
            "description": "\nEndpoints for managing folders.\n        "
        },
        {
            "name": "Attributes",
            "description": "\nEndpoints related to attribute configuration.\n\nWarning: data does not reflect the active configuration of the attributes.\nThe server needs to be restarted in order the changes become active.\n        "
        },
        {
            "name": "Addon settings",
            "description": "\nAddon configuration, site and project overrides...\n        "
        }
    ]
}
